package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ConsultaAfeccion represents a row from 'CaresoftDB.ConsultaAfeccion'.
type ConsultaAfeccion struct {
	ConsultaCodigo string `json:"consultaCodigo"` // consultaCodigo
	IDAfeccion     uint   `json:"idAfeccion"`     // idAfeccion
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ConsultaAfeccion] exists in the database.
func (ca *ConsultaAfeccion) Exists() bool {
	return ca._exists
}

// Deleted returns true when the [ConsultaAfeccion] has been marked for deletion
// from the database.
func (ca *ConsultaAfeccion) Deleted() bool {
	return ca._deleted
}

// Insert inserts the [ConsultaAfeccion] to the database.
func (ca *ConsultaAfeccion) Insert(ctx context.Context, db DB) error {
	switch {
	case ca._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ca._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.ConsultaAfeccion (` +
		`consultaCodigo, idAfeccion` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ca.ConsultaCodigo, ca.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, ca.ConsultaCodigo, ca.IDAfeccion); err != nil {
		return logerror(err)
	}
	// set exists
	ca._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [ConsultaAfeccion] from the database.
func (ca *ConsultaAfeccion) Delete(ctx context.Context, db DB) error {
	switch {
	case !ca._exists: // doesn't exist
		return nil
	case ca._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.ConsultaAfeccion ` +
		`WHERE consultaCodigo = ? AND idAfeccion = ?`
	// run
	logf(sqlstr, ca.ConsultaCodigo, ca.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, ca.ConsultaCodigo, ca.IDAfeccion); err != nil {
		return logerror(err)
	}
	// set deleted
	ca._deleted = true
	return nil
}

// ConsultaAfeccionByConsultaCodigoIDAfeccion retrieves a row from 'CaresoftDB.ConsultaAfeccion' as a [ConsultaAfeccion].
//
// Generated from index 'ConsultaAfeccion_consultaCodigo_idAfeccion_pkey'.
func ConsultaAfeccionByConsultaCodigoIDAfeccion(ctx context.Context, db DB, consultaCodigo string, idAfeccion uint) (*ConsultaAfeccion, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, idAfeccion ` +
		`FROM CaresoftDB.ConsultaAfeccion ` +
		`WHERE consultaCodigo = ? AND idAfeccion = ?`
	// run
	logf(sqlstr, consultaCodigo, idAfeccion)
	ca := ConsultaAfeccion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, consultaCodigo, idAfeccion).Scan(&ca.ConsultaCodigo, &ca.IDAfeccion); err != nil {
		return nil, logerror(err)
	}
	return &ca, nil
}

// ConsultaAfeccionByIDAfeccion retrieves a row from 'CaresoftDB.ConsultaAfeccion' as a [ConsultaAfeccion].
//
// Generated from index 'idAfeccion'.
func ConsultaAfeccionByIDAfeccion(ctx context.Context, db DB, idAfeccion uint) ([]*ConsultaAfeccion, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, idAfeccion ` +
		`FROM CaresoftDB.ConsultaAfeccion ` +
		`WHERE idAfeccion = ?`
	// run
	logf(sqlstr, idAfeccion)
	rows, err := db.QueryContext(ctx, sqlstr, idAfeccion)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ConsultaAfeccion
	for rows.Next() {
		ca := ConsultaAfeccion{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ca.ConsultaCodigo, &ca.IDAfeccion); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ca)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Consultum returns the Consultum associated with the [ConsultaAfeccion]'s (ConsultaCodigo).
//
// Generated from foreign key 'ConsultaAfeccion_ibfk_1'.
func (ca *ConsultaAfeccion) Consultum(ctx context.Context, db DB) (*Consultum, error) {
	return ConsultumByConsultaCodigo(ctx, db, ca.ConsultaCodigo)
}

// Afeccion returns the Afeccion associated with the [ConsultaAfeccion]'s (IDAfeccion).
//
// Generated from foreign key 'ConsultaAfeccion_ibfk_2'.
func (ca *ConsultaAfeccion) Afeccion(ctx context.Context, db DB) (*Afeccion, error) {
	return AfeccionByIDAfeccion(ctx, db, ca.IDAfeccion)
}

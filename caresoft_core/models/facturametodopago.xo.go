package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// FacturaMetodoPago represents a row from 'CaresoftDB.Factura_MetodoPago'.
type FacturaMetodoPago struct {
	FacturaCodigo string `json:"facturaCodigo"` // facturaCodigo
	IDMetodoPago  uint   `json:"idMetodoPago"`  // idMetodoPago
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FacturaMetodoPago] exists in the database.
func (fmp *FacturaMetodoPago) Exists() bool {
	return fmp._exists
}

// Deleted returns true when the [FacturaMetodoPago] has been marked for deletion
// from the database.
func (fmp *FacturaMetodoPago) Deleted() bool {
	return fmp._deleted
}

// Insert inserts the [FacturaMetodoPago] to the database.
func (fmp *FacturaMetodoPago) Insert(ctx context.Context, db DB) error {
	switch {
	case fmp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fmp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Factura_MetodoPago (` +
		`facturaCodigo, idMetodoPago` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, fmp.FacturaCodigo, fmp.IDMetodoPago)
	if _, err := db.ExecContext(ctx, sqlstr, fmp.FacturaCodigo, fmp.IDMetodoPago); err != nil {
		return logerror(err)
	}
	// set exists
	fmp._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [FacturaMetodoPago] from the database.
func (fmp *FacturaMetodoPago) Delete(ctx context.Context, db DB) error {
	switch {
	case !fmp._exists: // doesn't exist
		return nil
	case fmp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.Factura_MetodoPago ` +
		`WHERE facturaCodigo = ? AND idMetodoPago = ?`
	// run
	logf(sqlstr, fmp.FacturaCodigo, fmp.IDMetodoPago)
	if _, err := db.ExecContext(ctx, sqlstr, fmp.FacturaCodigo, fmp.IDMetodoPago); err != nil {
		return logerror(err)
	}
	// set deleted
	fmp._deleted = true
	return nil
}

// FacturaMetodoPagoByFacturaCodigoIDMetodoPago retrieves a row from 'CaresoftDB.Factura_MetodoPago' as a [FacturaMetodoPago].
//
// Generated from index 'Factura_MetodoPago_facturaCodigo_idMetodoPago_pkey'.
func FacturaMetodoPagoByFacturaCodigoIDMetodoPago(ctx context.Context, db DB, facturaCodigo string, idMetodoPago uint) (*FacturaMetodoPago, error) {
	// query
	const sqlstr = `SELECT ` +
		`facturaCodigo, idMetodoPago ` +
		`FROM CaresoftDB.Factura_MetodoPago ` +
		`WHERE facturaCodigo = ? AND idMetodoPago = ?`
	// run
	logf(sqlstr, facturaCodigo, idMetodoPago)
	fmp := FacturaMetodoPago{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, facturaCodigo, idMetodoPago).Scan(&fmp.FacturaCodigo, &fmp.IDMetodoPago); err != nil {
		return nil, logerror(err)
	}
	return &fmp, nil
}

// FacturaMetodoPagoByIDMetodoPago retrieves a row from 'CaresoftDB.Factura_MetodoPago' as a [FacturaMetodoPago].
//
// Generated from index 'idMetodoPago'.
func FacturaMetodoPagoByIDMetodoPago(ctx context.Context, db DB, idMetodoPago uint) ([]*FacturaMetodoPago, error) {
	// query
	const sqlstr = `SELECT ` +
		`facturaCodigo, idMetodoPago ` +
		`FROM CaresoftDB.Factura_MetodoPago ` +
		`WHERE idMetodoPago = ?`
	// run
	logf(sqlstr, idMetodoPago)
	rows, err := db.QueryContext(ctx, sqlstr, idMetodoPago)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FacturaMetodoPago
	for rows.Next() {
		fmp := FacturaMetodoPago{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fmp.FacturaCodigo, &fmp.IDMetodoPago); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fmp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Factura returns the Factura associated with the [FacturaMetodoPago]'s (FacturaCodigo).
//
// Generated from foreign key 'Factura_MetodoPago_ibfk_1'.
func (fmp *FacturaMetodoPago) Factura(ctx context.Context, db DB) (*Factura, error) {
	return FacturaByFacturaCodigo(ctx, db, fmp.FacturaCodigo)
}

// MetodoPago returns the MetodoPago associated with the [FacturaMetodoPago]'s (IDMetodoPago).
//
// Generated from foreign key 'Factura_MetodoPago_ibfk_2'.
func (fmp *FacturaMetodoPago) MetodoPago(ctx context.Context, db DB) (*MetodoPago, error) {
	return MetodoPagoByIDMetodoPago(ctx, db, fmp.IDMetodoPago)
}

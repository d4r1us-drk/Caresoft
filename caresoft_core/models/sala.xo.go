package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Sala represents a row from 'CaresoftDB.Sala'.
type Sala struct {
	NumSala uint   `json:"numSala"` // numSala
	Estado  Estado `json:"estado"`  // estado
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Sala] exists in the database.
func (s *Sala) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Sala] has been marked for deletion
// from the database.
func (s *Sala) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Sala] to the database.
func (s *Sala) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Sala (` +
		`estado` +
		`) VALUES (` +
		`?` +
		`)`
	// run
	logf(sqlstr, s.Estado)
	res, err := db.ExecContext(ctx, sqlstr, s.Estado)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	s.NumSala = uint(id)
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Sala] in the database.
func (s *Sala) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Sala SET ` +
		`estado = ? ` +
		`WHERE numSala = ?`
	// run
	logf(sqlstr, s.Estado, s.NumSala)
	if _, err := db.ExecContext(ctx, sqlstr, s.Estado, s.NumSala); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Sala] to the database.
func (s *Sala) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Sala].
func (s *Sala) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Sala (` +
		`numSala, estado` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`estado = VALUES(estado)`
	// run
	logf(sqlstr, s.NumSala, s.Estado)
	if _, err := db.ExecContext(ctx, sqlstr, s.NumSala, s.Estado); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Sala] from the database.
func (s *Sala) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Sala ` +
		`WHERE numSala = ?`
	// run
	logf(sqlstr, s.NumSala)
	if _, err := db.ExecContext(ctx, sqlstr, s.NumSala); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SalaByNumSala retrieves a row from 'CaresoftDB.Sala' as a [Sala].
//
// Generated from index 'Sala_numSala_pkey'.
func SalaByNumSala(ctx context.Context, db DB, numSala uint) (*Sala, error) {
	// query
	const sqlstr = `SELECT ` +
		`numSala, estado ` +
		`FROM CaresoftDB.Sala ` +
		`WHERE numSala = ?`
	// run
	logf(sqlstr, numSala)
	s := Sala{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, numSala).Scan(&s.NumSala, &s.Estado); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

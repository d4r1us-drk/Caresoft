package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// MetodoPago represents a row from 'CaresoftDB.MetodoPago'.
type MetodoPago struct {
	IDMetodoPago uint   `json:"idMetodoPago"` // idMetodoPago
	Nombre       string `json:"nombre"`       // nombre
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [MetodoPago] exists in the database.
func (mp *MetodoPago) Exists() bool {
	return mp._exists
}

// Deleted returns true when the [MetodoPago] has been marked for deletion
// from the database.
func (mp *MetodoPago) Deleted() bool {
	return mp._deleted
}

// Insert inserts the [MetodoPago] to the database.
func (mp *MetodoPago) Insert(ctx context.Context, db DB) error {
	switch {
	case mp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case mp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.MetodoPago (` +
		`nombre` +
		`) VALUES (` +
		`?` +
		`)`
	// run
	logf(sqlstr, mp.Nombre)
	res, err := db.ExecContext(ctx, sqlstr, mp.Nombre)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	mp.IDMetodoPago = uint(id)
	// set exists
	mp._exists = true
	return nil
}

// Update updates a [MetodoPago] in the database.
func (mp *MetodoPago) Update(ctx context.Context, db DB) error {
	switch {
	case !mp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case mp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.MetodoPago SET ` +
		`nombre = ? ` +
		`WHERE idMetodoPago = ?`
	// run
	logf(sqlstr, mp.Nombre, mp.IDMetodoPago)
	if _, err := db.ExecContext(ctx, sqlstr, mp.Nombre, mp.IDMetodoPago); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [MetodoPago] to the database.
func (mp *MetodoPago) Save(ctx context.Context, db DB) error {
	if mp.Exists() {
		return mp.Update(ctx, db)
	}
	return mp.Insert(ctx, db)
}

// Upsert performs an upsert for [MetodoPago].
func (mp *MetodoPago) Upsert(ctx context.Context, db DB) error {
	switch {
	case mp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.MetodoPago (` +
		`idMetodoPago, nombre` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre)`
	// run
	logf(sqlstr, mp.IDMetodoPago, mp.Nombre)
	if _, err := db.ExecContext(ctx, sqlstr, mp.IDMetodoPago, mp.Nombre); err != nil {
		return logerror(err)
	}
	// set exists
	mp._exists = true
	return nil
}

// Delete deletes the [MetodoPago] from the database.
func (mp *MetodoPago) Delete(ctx context.Context, db DB) error {
	switch {
	case !mp._exists: // doesn't exist
		return nil
	case mp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.MetodoPago ` +
		`WHERE idMetodoPago = ?`
	// run
	logf(sqlstr, mp.IDMetodoPago)
	if _, err := db.ExecContext(ctx, sqlstr, mp.IDMetodoPago); err != nil {
		return logerror(err)
	}
	// set deleted
	mp._deleted = true
	return nil
}

// MetodoPagoByIDMetodoPago retrieves a row from 'CaresoftDB.MetodoPago' as a [MetodoPago].
//
// Generated from index 'MetodoPago_idMetodoPago_pkey'.
func MetodoPagoByIDMetodoPago(ctx context.Context, db DB, idMetodoPago uint) (*MetodoPago, error) {
	// query
	const sqlstr = `SELECT ` +
		`idMetodoPago, nombre ` +
		`FROM CaresoftDB.MetodoPago ` +
		`WHERE idMetodoPago = ?`
	// run
	logf(sqlstr, idMetodoPago)
	mp := MetodoPago{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idMetodoPago).Scan(&mp.IDMetodoPago, &mp.Nombre); err != nil {
		return nil, logerror(err)
	}
	return &mp, nil
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Genero is the 'genero' enum type from schema 'CaresoftDB'.
type Genero uint16

// Genero values.
const (
	// GeneroM is the 'M' genero.
	GeneroM Genero = 1
	// GeneroF is the 'F' genero.
	GeneroF Genero = 2
)

// String satisfies the [fmt.Stringer] interface.
func (g Genero) String() string {
	switch g {
	case GeneroM:
		return "M"
	case GeneroF:
		return "F"
	}
	return fmt.Sprintf("Genero(%d)", g)
}

// MarshalText marshals [Genero] into text.
func (g Genero) MarshalText() ([]byte, error) {
	return []byte(g.String()), nil
}

// UnmarshalText unmarshals [Genero] from text.
func (g *Genero) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "M":
		*g = GeneroM
	case "F":
		*g = GeneroF
	default:
		return ErrInvalidGenero(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (g Genero) Value() (driver.Value, error) {
	return g.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (g *Genero) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return g.UnmarshalText(x)
	case string:
		return g.UnmarshalText([]byte(x))
	}
	return ErrInvalidGenero(fmt.Sprintf("%T", v))
}

// NullGenero represents a null 'genero' enum for schema 'CaresoftDB'.
type NullGenero struct {
	Genero Genero
	// Valid is true if [Genero] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ng NullGenero) Value() (driver.Value, error) {
	if !ng.Valid {
		return nil, nil
	}
	return ng.Genero.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ng *NullGenero) Scan(v interface{}) error {
	if v == nil {
		ng.Genero, ng.Valid = 0, false
		return nil
	}
	err := ng.Genero.Scan(v)
	ng.Valid = err == nil
	return err
}

// ErrInvalidGenero is the invalid [Genero] error.
type ErrInvalidGenero string

// Error satisfies the error interface.
func (err ErrInvalidGenero) Error() string {
	return fmt.Sprintf("invalid Genero(%s)", string(err))
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Sucursal represents a row from 'CaresoftDB.Sucursal'.
type Sucursal struct {
	IDSucursal uint   `json:"idSucursal"` // idSucursal
	Nombre     string `json:"nombre"`     // nombre
	Direccion  string `json:"direccion"`  // direccion
	Telefono   string `json:"telefono"`   // telefono
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Sucursal] exists in the database.
func (s *Sucursal) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Sucursal] has been marked for deletion
// from the database.
func (s *Sucursal) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Sucursal] to the database.
func (s *Sucursal) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Sucursal (` +
		`nombre, direccion, telefono` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, s.Nombre, s.Direccion, s.Telefono)
	res, err := db.ExecContext(ctx, sqlstr, s.Nombre, s.Direccion, s.Telefono)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	s.IDSucursal = uint(id)
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Sucursal] in the database.
func (s *Sucursal) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Sucursal SET ` +
		`nombre = ?, direccion = ?, telefono = ? ` +
		`WHERE idSucursal = ?`
	// run
	logf(sqlstr, s.Nombre, s.Direccion, s.Telefono, s.IDSucursal)
	if _, err := db.ExecContext(ctx, sqlstr, s.Nombre, s.Direccion, s.Telefono, s.IDSucursal); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Sucursal] to the database.
func (s *Sucursal) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Sucursal].
func (s *Sucursal) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Sucursal (` +
		`idSucursal, nombre, direccion, telefono` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre), direccion = VALUES(direccion), telefono = VALUES(telefono)`
	// run
	logf(sqlstr, s.IDSucursal, s.Nombre, s.Direccion, s.Telefono)
	if _, err := db.ExecContext(ctx, sqlstr, s.IDSucursal, s.Nombre, s.Direccion, s.Telefono); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Sucursal] from the database.
func (s *Sucursal) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Sucursal ` +
		`WHERE idSucursal = ?`
	// run
	logf(sqlstr, s.IDSucursal)
	if _, err := db.ExecContext(ctx, sqlstr, s.IDSucursal); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SucursalByIDSucursal retrieves a row from 'CaresoftDB.Sucursal' as a [Sucursal].
//
// Generated from index 'Sucursal_idSucursal_pkey'.
func SucursalByIDSucursal(ctx context.Context, db DB, idsucursal uint) (*Sucursal, error) {
	// query
	const sqlstr = `SELECT ` +
		`idSucursal, nombre, direccion, telefono ` +
		`FROM CaresoftDB.Sucursal ` +
		`WHERE idSucursal = ?`
	// run
	logf(sqlstr, idsucursal)
	s := Sucursal{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idsucursal).Scan(&s.IDSucursal, &s.Nombre, &s.Direccion, &s.Telefono); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

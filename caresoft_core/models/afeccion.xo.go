// Package models contains generated code for schema 'CaresoftDB'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Afeccion represents a row from 'CaresoftDB.Afeccion'.
type Afeccion struct {
	IDAfeccion  uint   `json:"idAfeccion"`  // idAfeccion
	Nombre      string `json:"nombre"`      // nombre
	Descripcion string `json:"descripcion"` // descripcion
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Afeccion] exists in the database.
func (a *Afeccion) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Afeccion] has been marked for deletion
// from the database.
func (a *Afeccion) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Afeccion] to the database.
func (a *Afeccion) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Afeccion (` +
		`nombre, descripcion` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, a.Nombre, a.Descripcion)
	res, err := db.ExecContext(ctx, sqlstr, a.Nombre, a.Descripcion)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	a.IDAfeccion = uint(id)
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Afeccion] in the database.
func (a *Afeccion) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Afeccion SET ` +
		`nombre = ?, descripcion = ? ` +
		`WHERE idAfeccion = ?`
	// run
	logf(sqlstr, a.Nombre, a.Descripcion, a.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, a.Nombre, a.Descripcion, a.IDAfeccion); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Afeccion] to the database.
func (a *Afeccion) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Afeccion].
func (a *Afeccion) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Afeccion (` +
		`idAfeccion, nombre, descripcion` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre), descripcion = VALUES(descripcion)`
	// run
	logf(sqlstr, a.IDAfeccion, a.Nombre, a.Descripcion)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAfeccion, a.Nombre, a.Descripcion); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Afeccion] from the database.
func (a *Afeccion) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Afeccion ` +
		`WHERE idAfeccion = ?`
	// run
	logf(sqlstr, a.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAfeccion); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AfeccionByIDAfeccion retrieves a row from 'CaresoftDB.Afeccion' as a [Afeccion].
//
// Generated from index 'Afeccion_idAfeccion_pkey'.
func AfeccionByIDAfeccion(ctx context.Context, db DB, idAfeccion uint) (*Afeccion, error) {
	// query
	const sqlstr = `SELECT ` +
		`idAfeccion, nombre, descripcion ` +
		`FROM CaresoftDB.Afeccion ` +
		`WHERE idAfeccion = ?`
	// run
	logf(sqlstr, idAfeccion)
	a := Afeccion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idAfeccion).Scan(&a.IDAfeccion, &a.Nombre, &a.Descripcion); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

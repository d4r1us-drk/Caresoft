package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// ReservaServicio represents a row from 'CaresoftDB.ReservaServicio'.
type ReservaServicio struct {
	IDReserva         uint      `json:"idReserva"`         // idReserva
	DocumentoPaciente string    `json:"documentoPaciente"` // documentoPaciente
	DocumentoMedico   string    `json:"documentoMedico"`   // documentoMedico
	ServicioCodigo    string    `json:"servicioCodigo"`    // servicioCodigo
	FechaReservada    time.Time `json:"fechaReservada"`    // fechaReservada
	Estado            Estado    `json:"estado"`            // estado
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ReservaServicio] exists in the database.
func (rs *ReservaServicio) Exists() bool {
	return rs._exists
}

// Deleted returns true when the [ReservaServicio] has been marked for deletion
// from the database.
func (rs *ReservaServicio) Deleted() bool {
	return rs._deleted
}

// Insert inserts the [ReservaServicio] to the database.
func (rs *ReservaServicio) Insert(ctx context.Context, db DB) error {
	switch {
	case rs._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rs._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.ReservaServicio (` +
		`documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, rs.FechaReservada, rs.Estado)
	res, err := db.ExecContext(ctx, sqlstr, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo, rs.FechaReservada, rs.Estado)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	rs.IDReserva = uint(id)
	// set exists
	rs._exists = true
	return nil
}

// Update updates a [ReservaServicio] in the database.
func (rs *ReservaServicio) Update(ctx context.Context, db DB) error {
	switch {
	case !rs._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case rs._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.ReservaServicio SET ` +
		`fechaReservada = ?, estado = ? ` +
		`WHERE idReserva = ? AND documentoPaciente = ? AND documentoMedico = ? AND servicioCodigo = ?`
	// run
	logf(sqlstr, rs.FechaReservada, rs.Estado, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, rs.FechaReservada, rs.Estado, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ReservaServicio] to the database.
func (rs *ReservaServicio) Save(ctx context.Context, db DB) error {
	if rs.Exists() {
		return rs.Update(ctx, db)
	}
	return rs.Insert(ctx, db)
}

// Upsert performs an upsert for [ReservaServicio].
func (rs *ReservaServicio) Upsert(ctx context.Context, db DB) error {
	switch {
	case rs._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.ReservaServicio (` +
		`idReserva, documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`documentoPaciente = VALUES(documentoPaciente), documentoMedico = VALUES(documentoMedico), servicioCodigo = VALUES(servicioCodigo), fechaReservada = VALUES(fechaReservada), estado = VALUES(estado)`
	// run
	logf(sqlstr, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo, rs.FechaReservada, rs.Estado)
	if _, err := db.ExecContext(ctx, sqlstr, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo, rs.FechaReservada, rs.Estado); err != nil {
		return logerror(err)
	}
	// set exists
	rs._exists = true
	return nil
}

// Delete deletes the [ReservaServicio] from the database.
func (rs *ReservaServicio) Delete(ctx context.Context, db DB) error {
	switch {
	case !rs._exists: // doesn't exist
		return nil
	case rs._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.ReservaServicio ` +
		`WHERE idReserva = ? AND documentoPaciente = ? AND documentoMedico = ? AND servicioCodigo = ?`
	// run
	logf(sqlstr, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, rs.IDReserva, rs.DocumentoPaciente, rs.DocumentoMedico, rs.ServicioCodigo); err != nil {
		return logerror(err)
	}
	// set deleted
	rs._deleted = true
	return nil
}

// ReservaServicioByIDReservaDocumentoPacienteDocumentoMedicoServicioCodigo retrieves a row from 'CaresoftDB.ReservaServicio' as a [ReservaServicio].
//
// Generated from index 'ReservaServicio_idReserva_documentoPaciente_documentoMedico_servicioCodigo_pkey'.
func ReservaServicioByIDReservaDocumentoPacienteDocumentoMedicoServicioCodigo(ctx context.Context, db DB, idReserva uint, documentoPaciente, documentoMedico, servicioCodigo string) (*ReservaServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`idReserva, documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado ` +
		`FROM CaresoftDB.ReservaServicio ` +
		`WHERE idReserva = ? AND documentoPaciente = ? AND documentoMedico = ? AND servicioCodigo = ?`
	// run
	logf(sqlstr, idReserva, documentoPaciente, documentoMedico, servicioCodigo)
	rs := ReservaServicio{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idReserva, documentoPaciente, documentoMedico, servicioCodigo).Scan(&rs.IDReserva, &rs.DocumentoPaciente, &rs.DocumentoMedico, &rs.ServicioCodigo, &rs.FechaReservada, &rs.Estado); err != nil {
		return nil, logerror(err)
	}
	return &rs, nil
}

// ReservaServicioByDocumentoMedico retrieves a row from 'CaresoftDB.ReservaServicio' as a [ReservaServicio].
//
// Generated from index 'documentoMedico'.
func ReservaServicioByDocumentoMedico(ctx context.Context, db DB, documentoMedico string) ([]*ReservaServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`idReserva, documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado ` +
		`FROM CaresoftDB.ReservaServicio ` +
		`WHERE documentoMedico = ?`
	// run
	logf(sqlstr, documentoMedico)
	rows, err := db.QueryContext(ctx, sqlstr, documentoMedico)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ReservaServicio
	for rows.Next() {
		rs := ReservaServicio{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rs.IDReserva, &rs.DocumentoPaciente, &rs.DocumentoMedico, &rs.ServicioCodigo, &rs.FechaReservada, &rs.Estado); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rs)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ReservaServicioByDocumentoPaciente retrieves a row from 'CaresoftDB.ReservaServicio' as a [ReservaServicio].
//
// Generated from index 'documentoPaciente'.
func ReservaServicioByDocumentoPaciente(ctx context.Context, db DB, documentoPaciente string) ([]*ReservaServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`idReserva, documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado ` +
		`FROM CaresoftDB.ReservaServicio ` +
		`WHERE documentoPaciente = ?`
	// run
	logf(sqlstr, documentoPaciente)
	rows, err := db.QueryContext(ctx, sqlstr, documentoPaciente)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ReservaServicio
	for rows.Next() {
		rs := ReservaServicio{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rs.IDReserva, &rs.DocumentoPaciente, &rs.DocumentoMedico, &rs.ServicioCodigo, &rs.FechaReservada, &rs.Estado); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rs)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ReservaServicioByServicioCodigo retrieves a row from 'CaresoftDB.ReservaServicio' as a [ReservaServicio].
//
// Generated from index 'servicioCodigo'.
func ReservaServicioByServicioCodigo(ctx context.Context, db DB, servicioCodigo string) ([]*ReservaServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`idReserva, documentoPaciente, documentoMedico, servicioCodigo, fechaReservada, estado ` +
		`FROM CaresoftDB.ReservaServicio ` +
		`WHERE servicioCodigo = ?`
	// run
	logf(sqlstr, servicioCodigo)
	rows, err := db.QueryContext(ctx, sqlstr, servicioCodigo)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ReservaServicio
	for rows.Next() {
		rs := ReservaServicio{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rs.IDReserva, &rs.DocumentoPaciente, &rs.DocumentoMedico, &rs.ServicioCodigo, &rs.FechaReservada, &rs.Estado); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rs)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PerfilUsuario returns the PerfilUsuario associated with the [ReservaServicio]'s (DocumentoPaciente).
//
// Generated from foreign key 'ReservaServicio_ibfk_1'.
func (rs *ReservaServicio) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, rs.DocumentoPaciente)
}

// PerfilUsuario returns the PerfilUsuario associated with the [ReservaServicio]'s (DocumentoMedico).
//
// Generated from foreign key 'ReservaServicio_ibfk_2'.
func (rs *ReservaServicio) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, rs.DocumentoMedico)
}

// Servicio returns the Servicio associated with the [ReservaServicio]'s (ServicioCodigo).
//
// Generated from foreign key 'ReservaServicio_ibfk_3'.
func (rs *ReservaServicio) Servicio(ctx context.Context, db DB) (*Servicio, error) {
	return ServicioByServicioCodigo(ctx, db, rs.ServicioCodigo)
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Aseguradora represents a row from 'CaresoftDB.Aseguradora'.
type Aseguradora struct {
	IDAseguradora uint   `json:"idAseguradora"` // idAseguradora
	Nombre        string `json:"nombre"`        // nombre
	Direccion     string `json:"direccion"`     // direccion
	Telefono      string `json:"telefono"`      // telefono
	Correo        string `json:"correo"`        // correo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Aseguradora] exists in the database.
func (a *Aseguradora) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Aseguradora] has been marked for deletion
// from the database.
func (a *Aseguradora) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Aseguradora] to the database.
func (a *Aseguradora) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Aseguradora (` +
		`nombre, direccion, telefono, correo` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, a.Nombre, a.Direccion, a.Telefono, a.Correo)
	res, err := db.ExecContext(ctx, sqlstr, a.Nombre, a.Direccion, a.Telefono, a.Correo)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	a.IDAseguradora = uint(id)
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Aseguradora] in the database.
func (a *Aseguradora) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Aseguradora SET ` +
		`nombre = ?, direccion = ?, telefono = ?, correo = ? ` +
		`WHERE idAseguradora = ?`
	// run
	logf(sqlstr, a.Nombre, a.Direccion, a.Telefono, a.Correo, a.IDAseguradora)
	if _, err := db.ExecContext(ctx, sqlstr, a.Nombre, a.Direccion, a.Telefono, a.Correo, a.IDAseguradora); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Aseguradora] to the database.
func (a *Aseguradora) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Aseguradora].
func (a *Aseguradora) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Aseguradora (` +
		`idAseguradora, nombre, direccion, telefono, correo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre), direccion = VALUES(direccion), telefono = VALUES(telefono), correo = VALUES(correo)`
	// run
	logf(sqlstr, a.IDAseguradora, a.Nombre, a.Direccion, a.Telefono, a.Correo)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAseguradora, a.Nombre, a.Direccion, a.Telefono, a.Correo); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Aseguradora] from the database.
func (a *Aseguradora) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Aseguradora ` +
		`WHERE idAseguradora = ?`
	// run
	logf(sqlstr, a.IDAseguradora)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAseguradora); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AseguradoraByIDAseguradora retrieves a row from 'CaresoftDB.Aseguradora' as a [Aseguradora].
//
// Generated from index 'Aseguradora_idAseguradora_pkey'.
func AseguradoraByIDAseguradora(ctx context.Context, db DB, idAseguradora uint) (*Aseguradora, error) {
	// query
	const sqlstr = `SELECT ` +
		`idAseguradora, nombre, direccion, telefono, correo ` +
		`FROM CaresoftDB.Aseguradora ` +
		`WHERE idAseguradora = ?`
	// run
	logf(sqlstr, idAseguradora)
	a := Aseguradora{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idAseguradora).Scan(&a.IDAseguradora, &a.Nombre, &a.Direccion, &a.Telefono, &a.Correo); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AseguradoraByCorreo retrieves a row from 'CaresoftDB.Aseguradora' as a [Aseguradora].
//
// Generated from index 'correo'.
func AseguradoraByCorreo(ctx context.Context, db DB, correo string) (*Aseguradora, error) {
	// query
	const sqlstr = `SELECT ` +
		`idAseguradora, nombre, direccion, telefono, correo ` +
		`FROM CaresoftDB.Aseguradora ` +
		`WHERE correo = ?`
	// run
	logf(sqlstr, correo)
	a := Aseguradora{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, correo).Scan(&a.IDAseguradora, &a.Nombre, &a.Direccion, &a.Telefono, &a.Correo); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Rol is the 'rol' enum type from schema 'CaresoftDB'.
type Rol uint16

// Rol values.
const (
	// RolP is the 'P' rol.
	RolP Rol = 1
	// RolA is the 'A' rol.
	RolA Rol = 2
	// RolM is the 'M' rol.
	RolM Rol = 3
	// RolE is the 'E' rol.
	RolE Rol = 4
	// RolC is the 'C' rol.
	RolC Rol = 5
)

// String satisfies the [fmt.Stringer] interface.
func (r Rol) String() string {
	switch r {
	case RolP:
		return "P"
	case RolA:
		return "A"
	case RolM:
		return "M"
	case RolE:
		return "E"
	case RolC:
		return "C"
	}
	return fmt.Sprintf("Rol(%d)", r)
}

// MarshalText marshals [Rol] into text.
func (r Rol) MarshalText() ([]byte, error) {
	return []byte(r.String()), nil
}

// UnmarshalText unmarshals [Rol] from text.
func (r *Rol) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "P":
		*r = RolP
	case "A":
		*r = RolA
	case "M":
		*r = RolM
	case "E":
		*r = RolE
	case "C":
		*r = RolC
	default:
		return ErrInvalidRol(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (r Rol) Value() (driver.Value, error) {
	return r.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (r *Rol) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return r.UnmarshalText(x)
	case string:
		return r.UnmarshalText([]byte(x))
	}
	return ErrInvalidRol(fmt.Sprintf("%T", v))
}

// NullRol represents a null 'rol' enum for schema 'CaresoftDB'.
type NullRol struct {
	Rol Rol
	// Valid is true if [Rol] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nr NullRol) Value() (driver.Value, error) {
	if !nr.Valid {
		return nil, nil
	}
	return nr.Rol.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nr *NullRol) Scan(v interface{}) error {
	if v == nil {
		nr.Rol, nr.Valid = 0, false
		return nil
	}
	err := nr.Rol.Scan(v)
	nr.Valid = err == nil
	return err
}

// ErrInvalidRol is the invalid [Rol] error.
type ErrInvalidRol string

// Error satisfies the error interface.
func (err ErrInvalidRol) Error() string {
	return fmt.Sprintf("invalid Rol(%s)", string(err))
}

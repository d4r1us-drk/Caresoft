package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// IngresoAfeccion represents a row from 'CaresoftDB.IngresoAfeccion'.
type IngresoAfeccion struct {
	IDIngreso  uint `json:"idIngreso"`  // idIngreso
	IDAfeccion uint `json:"idAfeccion"` // idAfeccion
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [IngresoAfeccion] exists in the database.
func (ia *IngresoAfeccion) Exists() bool {
	return ia._exists
}

// Deleted returns true when the [IngresoAfeccion] has been marked for deletion
// from the database.
func (ia *IngresoAfeccion) Deleted() bool {
	return ia._deleted
}

// Insert inserts the [IngresoAfeccion] to the database.
func (ia *IngresoAfeccion) Insert(ctx context.Context, db DB) error {
	switch {
	case ia._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ia._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.IngresoAfeccion (` +
		`idIngreso, idAfeccion` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ia.IDIngreso, ia.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, ia.IDIngreso, ia.IDAfeccion); err != nil {
		return logerror(err)
	}
	// set exists
	ia._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [IngresoAfeccion] from the database.
func (ia *IngresoAfeccion) Delete(ctx context.Context, db DB) error {
	switch {
	case !ia._exists: // doesn't exist
		return nil
	case ia._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.IngresoAfeccion ` +
		`WHERE idIngreso = ? AND idAfeccion = ?`
	// run
	logf(sqlstr, ia.IDIngreso, ia.IDAfeccion)
	if _, err := db.ExecContext(ctx, sqlstr, ia.IDIngreso, ia.IDAfeccion); err != nil {
		return logerror(err)
	}
	// set deleted
	ia._deleted = true
	return nil
}

// IngresoAfeccionByIDIngresoIDAfeccion retrieves a row from 'CaresoftDB.IngresoAfeccion' as a [IngresoAfeccion].
//
// Generated from index 'IngresoAfeccion_idIngreso_idAfeccion_pkey'.
func IngresoAfeccionByIDIngresoIDAfeccion(ctx context.Context, db DB, idIngreso, idAfeccion uint) (*IngresoAfeccion, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, idAfeccion ` +
		`FROM CaresoftDB.IngresoAfeccion ` +
		`WHERE idIngreso = ? AND idAfeccion = ?`
	// run
	logf(sqlstr, idIngreso, idAfeccion)
	ia := IngresoAfeccion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idIngreso, idAfeccion).Scan(&ia.IDIngreso, &ia.IDAfeccion); err != nil {
		return nil, logerror(err)
	}
	return &ia, nil
}

// IngresoAfeccionByIDAfeccion retrieves a row from 'CaresoftDB.IngresoAfeccion' as a [IngresoAfeccion].
//
// Generated from index 'idAfeccion'.
func IngresoAfeccionByIDAfeccion(ctx context.Context, db DB, idAfeccion uint) ([]*IngresoAfeccion, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, idAfeccion ` +
		`FROM CaresoftDB.IngresoAfeccion ` +
		`WHERE idAfeccion = ?`
	// run
	logf(sqlstr, idAfeccion)
	rows, err := db.QueryContext(ctx, sqlstr, idAfeccion)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*IngresoAfeccion
	for rows.Next() {
		ia := IngresoAfeccion{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ia.IDIngreso, &ia.IDAfeccion); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ia)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Ingreso returns the Ingreso associated with the [IngresoAfeccion]'s (IDIngreso).
//
// Generated from foreign key 'IngresoAfeccion_ibfk_1'.
func (ia *IngresoAfeccion) Ingreso(ctx context.Context, db DB) (*Ingreso, error) {
	return IngresoByIDIngreso(ctx, db, ia.IDIngreso)
}

// Afeccion returns the Afeccion associated with the [IngresoAfeccion]'s (IDAfeccion).
//
// Generated from foreign key 'IngresoAfeccion_ibfk_2'.
func (ia *IngresoAfeccion) Afeccion(ctx context.Context, db DB) (*Afeccion, error) {
	return AfeccionByIDAfeccion(ctx, db, ia.IDAfeccion)
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// TipoDocumento is the 'tipoDocumento' enum type from schema 'CaresoftDB'.
type TipoDocumento uint16

// TipoDocumento values.
const (
	// TipoDocumentoI is the 'I' tipoDocumento.
	TipoDocumentoI TipoDocumento = 1
	// TipoDocumentoP is the 'P' tipoDocumento.
	TipoDocumentoP TipoDocumento = 2
)

// String satisfies the [fmt.Stringer] interface.
func (td TipoDocumento) String() string {
	switch td {
	case TipoDocumentoI:
		return "I"
	case TipoDocumentoP:
		return "P"
	}
	return fmt.Sprintf("TipoDocumento(%d)", td)
}

// MarshalText marshals [TipoDocumento] into text.
func (td TipoDocumento) MarshalText() ([]byte, error) {
	return []byte(td.String()), nil
}

// UnmarshalText unmarshals [TipoDocumento] from text.
func (td *TipoDocumento) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "I":
		*td = TipoDocumentoI
	case "P":
		*td = TipoDocumentoP
	default:
		return ErrInvalidTipoDocumento(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (td TipoDocumento) Value() (driver.Value, error) {
	return td.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (td *TipoDocumento) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return td.UnmarshalText(x)
	case string:
		return td.UnmarshalText([]byte(x))
	}
	return ErrInvalidTipoDocumento(fmt.Sprintf("%T", v))
}

// NullTipoDocumento represents a null 'tipoDocumento' enum for schema 'CaresoftDB'.
type NullTipoDocumento struct {
	TipoDocumento TipoDocumento
	// Valid is true if [TipoDocumento] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ntd NullTipoDocumento) Value() (driver.Value, error) {
	if !ntd.Valid {
		return nil, nil
	}
	return ntd.TipoDocumento.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ntd *NullTipoDocumento) Scan(v interface{}) error {
	if v == nil {
		ntd.TipoDocumento, ntd.Valid = 0, false
		return nil
	}
	err := ntd.TipoDocumento.Scan(v)
	ntd.Valid = err == nil
	return err
}

// ErrInvalidTipoDocumento is the invalid [TipoDocumento] error.
type ErrInvalidTipoDocumento string

// Error satisfies the error interface.
func (err ErrInvalidTipoDocumento) Error() string {
	return fmt.Sprintf("invalid TipoDocumento(%s)", string(err))
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Producto represents a row from 'CaresoftDB.Producto'.
type Producto struct {
	IDProducto     uint    `json:"idProducto"`     // idProducto
	Nombre         string  `json:"nombre"`         // nombre
	Descripcion    string  `json:"descripcion"`    // descripcion
	Costo          float64 `json:"costo"`          // costo
	LoteDisponible uint    `json:"loteDisponible"` // loteDisponible
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Producto] exists in the database.
func (p *Producto) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Producto] has been marked for deletion
// from the database.
func (p *Producto) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Producto] to the database.
func (p *Producto) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Producto (` +
		`nombre, descripcion, costo, loteDisponible` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible)
	res, err := db.ExecContext(ctx, sqlstr, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	p.IDProducto = uint(id)
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Producto] in the database.
func (p *Producto) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Producto SET ` +
		`nombre = ?, descripcion = ?, costo = ?, loteDisponible = ? ` +
		`WHERE idProducto = ?`
	// run
	logf(sqlstr, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible, p.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible, p.IDProducto); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Producto] to the database.
func (p *Producto) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Producto].
func (p *Producto) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Producto (` +
		`idProducto, nombre, descripcion, costo, loteDisponible` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre), descripcion = VALUES(descripcion), costo = VALUES(costo), loteDisponible = VALUES(loteDisponible)`
	// run
	logf(sqlstr, p.IDProducto, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible)
	if _, err := db.ExecContext(ctx, sqlstr, p.IDProducto, p.Nombre, p.Descripcion, p.Costo, p.LoteDisponible); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Producto] from the database.
func (p *Producto) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Producto ` +
		`WHERE idProducto = ?`
	// run
	logf(sqlstr, p.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, p.IDProducto); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProductoByIDProducto retrieves a row from 'CaresoftDB.Producto' as a [Producto].
//
// Generated from index 'Producto_idProducto_pkey'.
func ProductoByIDProducto(ctx context.Context, db DB, idProducto uint) (*Producto, error) {
	// query
	const sqlstr = `SELECT ` +
		`idProducto, nombre, descripcion, costo, loteDisponible ` +
		`FROM CaresoftDB.Producto ` +
		`WHERE idProducto = ?`
	// run
	logf(sqlstr, idProducto)
	p := Producto{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idProducto).Scan(&p.IDProducto, &p.Nombre, &p.Descripcion, &p.Costo, &p.LoteDisponible); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PrescripcionServicio represents a row from 'CaresoftDB.PrescripcionServicio'.
type PrescripcionServicio struct {
	ConsultaCodigo string `json:"consultaCodigo"` // consultaCodigo
	ServicioCodigo string `json:"servicioCodigo"` // servicioCodigo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PrescripcionServicio] exists in the database.
func (ps *PrescripcionServicio) Exists() bool {
	return ps._exists
}

// Deleted returns true when the [PrescripcionServicio] has been marked for deletion
// from the database.
func (ps *PrescripcionServicio) Deleted() bool {
	return ps._deleted
}

// Insert inserts the [PrescripcionServicio] to the database.
func (ps *PrescripcionServicio) Insert(ctx context.Context, db DB) error {
	switch {
	case ps._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ps._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.PrescripcionServicio (` +
		`consultaCodigo, servicioCodigo` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ps.ConsultaCodigo, ps.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, ps.ConsultaCodigo, ps.ServicioCodigo); err != nil {
		return logerror(err)
	}
	// set exists
	ps._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [PrescripcionServicio] from the database.
func (ps *PrescripcionServicio) Delete(ctx context.Context, db DB) error {
	switch {
	case !ps._exists: // doesn't exist
		return nil
	case ps._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.PrescripcionServicio ` +
		`WHERE consultaCodigo = ? AND servicioCodigo = ?`
	// run
	logf(sqlstr, ps.ConsultaCodigo, ps.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, ps.ConsultaCodigo, ps.ServicioCodigo); err != nil {
		return logerror(err)
	}
	// set deleted
	ps._deleted = true
	return nil
}

// PrescripcionServicioByConsultaCodigoServicioCodigo retrieves a row from 'CaresoftDB.PrescripcionServicio' as a [PrescripcionServicio].
//
// Generated from index 'PrescripcionServicio_consultaCodigo_servicioCodigo_pkey'.
func PrescripcionServicioByConsultaCodigoServicioCodigo(ctx context.Context, db DB, consultaCodigo, servicioCodigo string) (*PrescripcionServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, servicioCodigo ` +
		`FROM CaresoftDB.PrescripcionServicio ` +
		`WHERE consultaCodigo = ? AND servicioCodigo = ?`
	// run
	logf(sqlstr, consultaCodigo, servicioCodigo)
	ps := PrescripcionServicio{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, consultaCodigo, servicioCodigo).Scan(&ps.ConsultaCodigo, &ps.ServicioCodigo); err != nil {
		return nil, logerror(err)
	}
	return &ps, nil
}

// PrescripcionServicioByServicioCodigo retrieves a row from 'CaresoftDB.PrescripcionServicio' as a [PrescripcionServicio].
//
// Generated from index 'servicioCodigo'.
func PrescripcionServicioByServicioCodigo(ctx context.Context, db DB, servicioCodigo string) ([]*PrescripcionServicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, servicioCodigo ` +
		`FROM CaresoftDB.PrescripcionServicio ` +
		`WHERE servicioCodigo = ?`
	// run
	logf(sqlstr, servicioCodigo)
	rows, err := db.QueryContext(ctx, sqlstr, servicioCodigo)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PrescripcionServicio
	for rows.Next() {
		ps := PrescripcionServicio{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ps.ConsultaCodigo, &ps.ServicioCodigo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ps)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Consultum returns the Consultum associated with the [PrescripcionServicio]'s (ConsultaCodigo).
//
// Generated from foreign key 'PrescripcionServicio_ibfk_1'.
func (ps *PrescripcionServicio) Consultum(ctx context.Context, db DB) (*Consultum, error) {
	return ConsultumByConsultaCodigo(ctx, db, ps.ConsultaCodigo)
}

// Servicio returns the Servicio associated with the [PrescripcionServicio]'s (ServicioCodigo).
//
// Generated from foreign key 'PrescripcionServicio_ibfk_2'.
func (ps *PrescripcionServicio) Servicio(ctx context.Context, db DB) (*Servicio, error) {
	return ServicioByServicioCodigo(ctx, db, ps.ServicioCodigo)
}

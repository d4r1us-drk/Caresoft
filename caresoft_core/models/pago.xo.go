package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Pago represents a row from 'CaresoftDB.Pago'.
type Pago struct {
	IDPago      uint      `json:"idPago"`      // idPago
	IDCuenta    uint      `json:"idCuenta"`    // idCuenta
	MontoPagado float64   `json:"montoPagado"` // montoPagado
	Fecha       time.Time `json:"fecha"`       // fecha
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Pago] exists in the database.
func (p *Pago) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Pago] has been marked for deletion
// from the database.
func (p *Pago) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Pago] to the database.
func (p *Pago) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Pago (` +
		`idCuenta, montoPagado, fecha` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.IDCuenta, p.MontoPagado, p.Fecha)
	res, err := db.ExecContext(ctx, sqlstr, p.IDCuenta, p.MontoPagado, p.Fecha)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	p.IDPago = uint(id)
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Pago] in the database.
func (p *Pago) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Pago SET ` +
		`idCuenta = ?, montoPagado = ?, fecha = ? ` +
		`WHERE idPago = ?`
	// run
	logf(sqlstr, p.IDCuenta, p.MontoPagado, p.Fecha, p.IDPago)
	if _, err := db.ExecContext(ctx, sqlstr, p.IDCuenta, p.MontoPagado, p.Fecha, p.IDPago); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Pago] to the database.
func (p *Pago) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Pago].
func (p *Pago) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Pago (` +
		`idPago, idCuenta, montoPagado, fecha` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`idCuenta = VALUES(idCuenta), montoPagado = VALUES(montoPagado), fecha = VALUES(fecha)`
	// run
	logf(sqlstr, p.IDPago, p.IDCuenta, p.MontoPagado, p.Fecha)
	if _, err := db.ExecContext(ctx, sqlstr, p.IDPago, p.IDCuenta, p.MontoPagado, p.Fecha); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Pago] from the database.
func (p *Pago) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Pago ` +
		`WHERE idPago = ?`
	// run
	logf(sqlstr, p.IDPago)
	if _, err := db.ExecContext(ctx, sqlstr, p.IDPago); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PagoByIDPago retrieves a row from 'CaresoftDB.Pago' as a [Pago].
//
// Generated from index 'Pago_idPago_pkey'.
func PagoByIDPago(ctx context.Context, db DB, idPago uint) (*Pago, error) {
	// query
	const sqlstr = `SELECT ` +
		`idPago, idCuenta, montoPagado, fecha ` +
		`FROM CaresoftDB.Pago ` +
		`WHERE idPago = ?`
	// run
	logf(sqlstr, idPago)
	p := Pago{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idPago).Scan(&p.IDPago, &p.IDCuenta, &p.MontoPagado, &p.Fecha); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// PagoByIDCuenta retrieves a row from 'CaresoftDB.Pago' as a [Pago].
//
// Generated from index 'idCuenta'.
func PagoByIDCuenta(ctx context.Context, db DB, idCuenta uint) ([]*Pago, error) {
	// query
	const sqlstr = `SELECT ` +
		`idPago, idCuenta, montoPagado, fecha ` +
		`FROM CaresoftDB.Pago ` +
		`WHERE idCuenta = ?`
	// run
	logf(sqlstr, idCuenta)
	rows, err := db.QueryContext(ctx, sqlstr, idCuenta)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Pago
	for rows.Next() {
		p := Pago{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.IDPago, &p.IDCuenta, &p.MontoPagado, &p.Fecha); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Cuentum returns the Cuentum associated with the [Pago]'s (IDCuenta).
//
// Generated from foreign key 'Pago_ibfk_1'.
func (p *Pago) Cuentum(ctx context.Context, db DB) (*Cuentum, error) {
	return CuentumByIDCuenta(ctx, db, p.IDCuenta)
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// PerfilUsuario represents a row from 'CaresoftDB.PerfilUsuario'.
type PerfilUsuario struct {
	Documento         string         `json:"documento"`         // documento
	TipoDocumento     Tipodocumento  `json:"tipoDocumento"`     // tipoDocumento
	NumLicenciaMedica sql.NullInt64  `json:"numLicenciaMedica"` // numLicenciaMedica
	Nombre            string         `json:"nombre"`            // nombre
	Apellido          string         `json:"apellido"`          // apellido
	Genero            Genero         `json:"genero"`            // genero
	FechaNacimiento   time.Time      `json:"fechaNacimiento"`   // fechaNacimiento
	Telefono          string         `json:"telefono"`          // telefono
	Correo            string         `json:"correo"`            // correo
	Direccion         sql.NullString `json:"direccion"`         // direccion
	Rol               Rol            `json:"rol"`               // rol
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PerfilUsuario] exists in the database.
func (pu *PerfilUsuario) Exists() bool {
	return pu._exists
}

// Deleted returns true when the [PerfilUsuario] has been marked for deletion
// from the database.
func (pu *PerfilUsuario) Deleted() bool {
	return pu._deleted
}

// Insert inserts the [PerfilUsuario] to the database.
func (pu *PerfilUsuario) Insert(ctx context.Context, db DB) error {
	switch {
	case pu._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pu._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.PerfilUsuario (` +
		`documento, tipoDocumento, numLicenciaMedica, nombre, apellido, genero, fechaNacimiento, telefono, correo, direccion, rol` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, pu.Documento, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol)
	if _, err := db.ExecContext(ctx, sqlstr, pu.Documento, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol); err != nil {
		return logerror(err)
	}
	// set exists
	pu._exists = true
	return nil
}

// Update updates a [PerfilUsuario] in the database.
func (pu *PerfilUsuario) Update(ctx context.Context, db DB) error {
	switch {
	case !pu._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pu._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.PerfilUsuario SET ` +
		`tipoDocumento = ?, numLicenciaMedica = ?, nombre = ?, apellido = ?, genero = ?, fechaNacimiento = ?, telefono = ?, correo = ?, direccion = ?, rol = ? ` +
		`WHERE documento = ?`
	// run
	logf(sqlstr, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol, pu.Documento)
	if _, err := db.ExecContext(ctx, sqlstr, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol, pu.Documento); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PerfilUsuario] to the database.
func (pu *PerfilUsuario) Save(ctx context.Context, db DB) error {
	if pu.Exists() {
		return pu.Update(ctx, db)
	}
	return pu.Insert(ctx, db)
}

// Upsert performs an upsert for [PerfilUsuario].
func (pu *PerfilUsuario) Upsert(ctx context.Context, db DB) error {
	switch {
	case pu._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.PerfilUsuario (` +
		`documento, tipoDocumento, numLicenciaMedica, nombre, apellido, genero, fechaNacimiento, telefono, correo, direccion, rol` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`documento = VALUES(documento), tipoDocumento = VALUES(tipoDocumento), numLicenciaMedica = VALUES(numLicenciaMedica), nombre = VALUES(nombre), apellido = VALUES(apellido), genero = VALUES(genero), fechaNacimiento = VALUES(fechaNacimiento), telefono = VALUES(telefono), correo = VALUES(correo), direccion = VALUES(direccion), rol = VALUES(rol)`
	// run
	logf(sqlstr, pu.Documento, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol)
	if _, err := db.ExecContext(ctx, sqlstr, pu.Documento, pu.TipoDocumento, pu.NumLicenciaMedica, pu.Nombre, pu.Apellido, pu.Genero, pu.FechaNacimiento, pu.Telefono, pu.Correo, pu.Direccion, pu.Rol); err != nil {
		return logerror(err)
	}
	// set exists
	pu._exists = true
	return nil
}

// Delete deletes the [PerfilUsuario] from the database.
func (pu *PerfilUsuario) Delete(ctx context.Context, db DB) error {
	switch {
	case !pu._exists: // doesn't exist
		return nil
	case pu._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.PerfilUsuario ` +
		`WHERE documento = ?`
	// run
	logf(sqlstr, pu.Documento)
	if _, err := db.ExecContext(ctx, sqlstr, pu.Documento); err != nil {
		return logerror(err)
	}
	// set deleted
	pu._deleted = true
	return nil
}

// PerfilUsuarioByDocumento retrieves a row from 'CaresoftDB.PerfilUsuario' as a [PerfilUsuario].
//
// Generated from index 'PerfilUsuario_documento_pkey'.
func PerfilUsuarioByDocumento(ctx context.Context, db DB, documento string) (*PerfilUsuario, error) {
	// query
	const sqlstr = `SELECT ` +
		`documento, tipoDocumento, numLicenciaMedica, nombre, apellido, genero, fechaNacimiento, telefono, correo, direccion, rol ` +
		`FROM CaresoftDB.PerfilUsuario ` +
		`WHERE documento = ?`
	// run
	logf(sqlstr, documento)
	pu := PerfilUsuario{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, documento).Scan(&pu.Documento, &pu.TipoDocumento, &pu.NumLicenciaMedica, &pu.Nombre, &pu.Apellido, &pu.Genero, &pu.FechaNacimiento, &pu.Telefono, &pu.Correo, &pu.Direccion, &pu.Rol); err != nil {
		return nil, logerror(err)
	}
	return &pu, nil
}

// PerfilUsuarioByNumLicenciaMedica retrieves a row from 'CaresoftDB.PerfilUsuario' as a [PerfilUsuario].
//
// Generated from index 'numLicenciaMedica'.
func PerfilUsuarioByNumLicenciaMedica(ctx context.Context, db DB, numLicenciaMedica sql.NullInt64) (*PerfilUsuario, error) {
	// query
	const sqlstr = `SELECT ` +
		`documento, tipoDocumento, numLicenciaMedica, nombre, apellido, genero, fechaNacimiento, telefono, correo, direccion, rol ` +
		`FROM CaresoftDB.PerfilUsuario ` +
		`WHERE numLicenciaMedica = ?`
	// run
	logf(sqlstr, numLicenciaMedica)
	pu := PerfilUsuario{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, numLicenciaMedica).Scan(&pu.Documento, &pu.TipoDocumento, &pu.NumLicenciaMedica, &pu.Nombre, &pu.Apellido, &pu.Genero, &pu.FechaNacimiento, &pu.Telefono, &pu.Correo, &pu.Direccion, &pu.Rol); err != nil {
		return nil, logerror(err)
	}
	return &pu, nil
}

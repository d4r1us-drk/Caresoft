package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Consultorio represents a row from 'CaresoftDB.Consultorio'.
type Consultorio struct {
	IDConsultorio uint   `json:"idConsultorio"` // idConsultorio
	Nombre        string `json:"nombre"`        // nombre
	Direccion     string `json:"direccion"`     // direccion
	Telefono      string `json:"telefono"`      // telefono
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Consultorio] exists in the database.
func (c *Consultorio) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Consultorio] has been marked for deletion
// from the database.
func (c *Consultorio) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Consultorio] to the database.
func (c *Consultorio) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Consultorio (` +
		`nombre, direccion, telefono` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.Nombre, c.Direccion, c.Telefono)
	res, err := db.ExecContext(ctx, sqlstr, c.Nombre, c.Direccion, c.Telefono)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.IDConsultorio = uint(id)
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Consultorio] in the database.
func (c *Consultorio) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Consultorio SET ` +
		`nombre = ?, direccion = ?, telefono = ? ` +
		`WHERE idConsultorio = ?`
	// run
	logf(sqlstr, c.Nombre, c.Direccion, c.Telefono, c.IDConsultorio)
	if _, err := db.ExecContext(ctx, sqlstr, c.Nombre, c.Direccion, c.Telefono, c.IDConsultorio); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Consultorio] to the database.
func (c *Consultorio) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Consultorio].
func (c *Consultorio) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Consultorio (` +
		`idConsultorio, nombre, direccion, telefono` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`nombre = VALUES(nombre), direccion = VALUES(direccion), telefono = VALUES(telefono)`
	// run
	logf(sqlstr, c.IDConsultorio, c.Nombre, c.Direccion, c.Telefono)
	if _, err := db.ExecContext(ctx, sqlstr, c.IDConsultorio, c.Nombre, c.Direccion, c.Telefono); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Consultorio] from the database.
func (c *Consultorio) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Consultorio ` +
		`WHERE idConsultorio = ?`
	// run
	logf(sqlstr, c.IDConsultorio)
	if _, err := db.ExecContext(ctx, sqlstr, c.IDConsultorio); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// ConsultorioByIDConsultorio retrieves a row from 'CaresoftDB.Consultorio' as a [Consultorio].
//
// Generated from index 'Consultorio_idConsultorio_pkey'.
func ConsultorioByIDConsultorio(ctx context.Context, db DB, idConsultorio uint) (*Consultorio, error) {
	// query
	const sqlstr = `SELECT ` +
		`idConsultorio, nombre, direccion, telefono ` +
		`FROM CaresoftDB.Consultorio ` +
		`WHERE idConsultorio = ?`
	// run
	logf(sqlstr, idConsultorio)
	c := Consultorio{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idConsultorio).Scan(&c.IDConsultorio, &c.Nombre, &c.Direccion, &c.Telefono); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Usuario represents a row from 'CaresoftDB.Usuario'.
type Usuario struct {
	UsuarioCodigo    string `json:"usuarioCodigo"`    // usuarioCodigo
	DocumentoUsuario string `json:"documentoUsuario"` // documentoUsuario
	UsuarioContra    string `json:"usuarioContra"`    // usuarioContra
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Usuario] exists in the database.
func (u *Usuario) Exists() bool {
	return u._exists
}

// Deleted returns true when the [Usuario] has been marked for deletion
// from the database.
func (u *Usuario) Deleted() bool {
	return u._deleted
}

// Insert inserts the [Usuario] to the database.
func (u *Usuario) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Usuario (` +
		`usuarioCodigo, documentoUsuario, usuarioContra` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, u.UsuarioCodigo, u.DocumentoUsuario, u.UsuarioContra)
	if _, err := db.ExecContext(ctx, sqlstr, u.UsuarioCodigo, u.DocumentoUsuario, u.UsuarioContra); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a [Usuario] in the database.
func (u *Usuario) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Usuario SET ` +
		`documentoUsuario = ?, usuarioContra = ? ` +
		`WHERE usuarioCodigo = ?`
	// run
	logf(sqlstr, u.DocumentoUsuario, u.UsuarioContra, u.UsuarioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, u.DocumentoUsuario, u.UsuarioContra, u.UsuarioCodigo); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Usuario] to the database.
func (u *Usuario) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [Usuario].
func (u *Usuario) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Usuario (` +
		`usuarioCodigo, documentoUsuario, usuarioContra` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`usuarioCodigo = VALUES(usuarioCodigo), documentoUsuario = VALUES(documentoUsuario), usuarioContra = VALUES(usuarioContra)`
	// run
	logf(sqlstr, u.UsuarioCodigo, u.DocumentoUsuario, u.UsuarioContra)
	if _, err := db.ExecContext(ctx, sqlstr, u.UsuarioCodigo, u.DocumentoUsuario, u.UsuarioContra); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [Usuario] from the database.
func (u *Usuario) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Usuario ` +
		`WHERE usuarioCodigo = ?`
	// run
	logf(sqlstr, u.UsuarioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, u.UsuarioCodigo); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UsuarioByUsuarioCodigo retrieves a row from 'CaresoftDB.Usuario' as a [Usuario].
//
// Generated from index 'Usuario_usuarioCodigo_pkey'.
func UsuarioByUsuarioCodigo(ctx context.Context, db DB, usuarioCodigo string) (*Usuario, error) {
	// query
	const sqlstr = `SELECT ` +
		`usuarioCodigo, documentoUsuario, usuarioContra ` +
		`FROM CaresoftDB.Usuario ` +
		`WHERE usuarioCodigo = ?`
	// run
	logf(sqlstr, usuarioCodigo)
	u := Usuario{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, usuarioCodigo).Scan(&u.UsuarioCodigo, &u.DocumentoUsuario, &u.UsuarioContra); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UsuarioByDocumentoUsuario retrieves a row from 'CaresoftDB.Usuario' as a [Usuario].
//
// Generated from index 'documentoUsuario'.
func UsuarioByDocumentoUsuario(ctx context.Context, db DB, documentoUsuario string) (*Usuario, error) {
	// query
	const sqlstr = `SELECT ` +
		`usuarioCodigo, documentoUsuario, usuarioContra ` +
		`FROM CaresoftDB.Usuario ` +
		`WHERE documentoUsuario = ?`
	// run
	logf(sqlstr, documentoUsuario)
	u := Usuario{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, documentoUsuario).Scan(&u.UsuarioCodigo, &u.DocumentoUsuario, &u.UsuarioContra); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// PerfilUsuario returns the PerfilUsuario associated with the [Usuario]'s (DocumentoUsuario).
//
// Generated from foreign key 'Usuario_ibfk_1'.
func (u *Usuario) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, u.DocumentoUsuario)
}

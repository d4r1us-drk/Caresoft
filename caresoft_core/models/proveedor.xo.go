package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Proveedor represents a row from 'CaresoftDB.Proveedor'.
type Proveedor struct {
	RncProveedor uint   `json:"rncProveedor"` // rncProveedor
	Nombre       string `json:"nombre"`       // nombre
	Direccion    string `json:"direccion"`    // direccion
	Telefono     string `json:"telefono"`     // telefono
	Correo       string `json:"correo"`       // correo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Proveedor] exists in the database.
func (p *Proveedor) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Proveedor] has been marked for deletion
// from the database.
func (p *Proveedor) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Proveedor] to the database.
func (p *Proveedor) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Proveedor (` +
		`rncProveedor, nombre, direccion, telefono, correo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.RncProveedor, p.Nombre, p.Direccion, p.Telefono, p.Correo)
	if _, err := db.ExecContext(ctx, sqlstr, p.RncProveedor, p.Nombre, p.Direccion, p.Telefono, p.Correo); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Proveedor] in the database.
func (p *Proveedor) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Proveedor SET ` +
		`nombre = ?, direccion = ?, telefono = ?, correo = ? ` +
		`WHERE rncProveedor = ?`
	// run
	logf(sqlstr, p.Nombre, p.Direccion, p.Telefono, p.Correo, p.RncProveedor)
	if _, err := db.ExecContext(ctx, sqlstr, p.Nombre, p.Direccion, p.Telefono, p.Correo, p.RncProveedor); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Proveedor] to the database.
func (p *Proveedor) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Proveedor].
func (p *Proveedor) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Proveedor (` +
		`rncProveedor, nombre, direccion, telefono, correo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`rncProveedor = VALUES(rncProveedor), nombre = VALUES(nombre), direccion = VALUES(direccion), telefono = VALUES(telefono), correo = VALUES(correo)`
	// run
	logf(sqlstr, p.RncProveedor, p.Nombre, p.Direccion, p.Telefono, p.Correo)
	if _, err := db.ExecContext(ctx, sqlstr, p.RncProveedor, p.Nombre, p.Direccion, p.Telefono, p.Correo); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Proveedor] from the database.
func (p *Proveedor) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Proveedor ` +
		`WHERE rncProveedor = ?`
	// run
	logf(sqlstr, p.RncProveedor)
	if _, err := db.ExecContext(ctx, sqlstr, p.RncProveedor); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProveedorByRncProveedor retrieves a row from 'CaresoftDB.Proveedor' as a [Proveedor].
//
// Generated from index 'Proveedor_rncProveedor_pkey'.
func ProveedorByRncProveedor(ctx context.Context, db DB, rncProveedor uint) (*Proveedor, error) {
	// query
	const sqlstr = `SELECT ` +
		`rncProveedor, nombre, direccion, telefono, correo ` +
		`FROM CaresoftDB.Proveedor ` +
		`WHERE rncProveedor = ?`
	// run
	logf(sqlstr, rncProveedor)
	p := Proveedor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, rncProveedor).Scan(&p.RncProveedor, &p.Nombre, &p.Direccion, &p.Telefono, &p.Correo); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

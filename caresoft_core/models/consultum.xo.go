package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Consultum represents a row from 'CaresoftDB.Consulta'.
type Consultum struct {
	ConsultaCodigo    string         `json:"consultaCodigo"`    // consultaCodigo
	DocumentoPaciente string         `json:"documentoPaciente"` // documentoPaciente
	DocumentoMedico   string         `json:"documentoMedico"`   // documentoMedico
	IDConsultorio     uint           `json:"idConsultorio"`     // idConsultorio
	IDAutorizacion    sql.NullInt64  `json:"idAutorizacion"`    // idAutorizacion
	Fecha             time.Time      `json:"fecha"`             // fecha
	Motivo            string         `json:"motivo"`            // motivo
	Comentarios       sql.NullString `json:"comentarios"`       // comentarios
	Estado            Estado         `json:"estado"`            // estado
	Costo             float64        `json:"costo"`             // costo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Consultum] exists in the database.
func (c *Consultum) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Consultum] has been marked for deletion
// from the database.
func (c *Consultum) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Consultum] to the database.
func (c *Consultum) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Consulta (` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.ConsultaCodigo, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, c.ConsultaCodigo, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Consultum] in the database.
func (c *Consultum) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Consulta SET ` +
		`documentoPaciente = ?, documentoMedico = ?, idConsultorio = ?, idAutorizacion = ?, fecha = ?, motivo = ?, comentarios = ?, estado = ?, costo = ? ` +
		`WHERE consultaCodigo = ?`
	// run
	logf(sqlstr, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo, c.ConsultaCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo, c.ConsultaCodigo); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Consultum] to the database.
func (c *Consultum) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Consultum].
func (c *Consultum) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Consulta (` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`consultaCodigo = VALUES(consultaCodigo), documentoPaciente = VALUES(documentoPaciente), documentoMedico = VALUES(documentoMedico), idConsultorio = VALUES(idConsultorio), idAutorizacion = VALUES(idAutorizacion), fecha = VALUES(fecha), motivo = VALUES(motivo), comentarios = VALUES(comentarios), estado = VALUES(estado), costo = VALUES(costo)`
	// run
	logf(sqlstr, c.ConsultaCodigo, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, c.ConsultaCodigo, c.DocumentoPaciente, c.DocumentoMedico, c.IDConsultorio, c.IDAutorizacion, c.Fecha, c.Motivo, c.Comentarios, c.Estado, c.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Consultum] from the database.
func (c *Consultum) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Consulta ` +
		`WHERE consultaCodigo = ?`
	// run
	logf(sqlstr, c.ConsultaCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, c.ConsultaCodigo); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// ConsultumByConsultaCodigo retrieves a row from 'CaresoftDB.Consulta' as a [Consultum].
//
// Generated from index 'Consulta_consultaCodigo_pkey'.
func ConsultumByConsultaCodigo(ctx context.Context, db DB, consultaCodigo string) (*Consultum, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo ` +
		`FROM CaresoftDB.Consulta ` +
		`WHERE consultaCodigo = ?`
	// run
	logf(sqlstr, consultaCodigo)
	c := Consultum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, consultaCodigo).Scan(&c.ConsultaCodigo, &c.DocumentoPaciente, &c.DocumentoMedico, &c.IDConsultorio, &c.IDAutorizacion, &c.Fecha, &c.Motivo, &c.Comentarios, &c.Estado, &c.Costo); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// ConsultaByDocumentoMedico retrieves a row from 'CaresoftDB.Consulta' as a [Consultum].
//
// Generated from index 'documentoMedico'.
func ConsultaByDocumentoMedico(ctx context.Context, db DB, documentoMedico string) ([]*Consultum, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo ` +
		`FROM CaresoftDB.Consulta ` +
		`WHERE documentoMedico = ?`
	// run
	logf(sqlstr, documentoMedico)
	rows, err := db.QueryContext(ctx, sqlstr, documentoMedico)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Consultum
	for rows.Next() {
		c := Consultum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ConsultaCodigo, &c.DocumentoPaciente, &c.DocumentoMedico, &c.IDConsultorio, &c.IDAutorizacion, &c.Fecha, &c.Motivo, &c.Comentarios, &c.Estado, &c.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ConsultaByDocumentoPaciente retrieves a row from 'CaresoftDB.Consulta' as a [Consultum].
//
// Generated from index 'documentoPaciente'.
func ConsultaByDocumentoPaciente(ctx context.Context, db DB, documentoPaciente string) ([]*Consultum, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo ` +
		`FROM CaresoftDB.Consulta ` +
		`WHERE documentoPaciente = ?`
	// run
	logf(sqlstr, documentoPaciente)
	rows, err := db.QueryContext(ctx, sqlstr, documentoPaciente)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Consultum
	for rows.Next() {
		c := Consultum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ConsultaCodigo, &c.DocumentoPaciente, &c.DocumentoMedico, &c.IDConsultorio, &c.IDAutorizacion, &c.Fecha, &c.Motivo, &c.Comentarios, &c.Estado, &c.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ConsultaByIDAutorizacion retrieves a row from 'CaresoftDB.Consulta' as a [Consultum].
//
// Generated from index 'idAutorizacion'.
func ConsultaByIDAutorizacion(ctx context.Context, db DB, idAutorizacion sql.NullInt64) ([]*Consultum, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo ` +
		`FROM CaresoftDB.Consulta ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, idAutorizacion)
	rows, err := db.QueryContext(ctx, sqlstr, idAutorizacion)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Consultum
	for rows.Next() {
		c := Consultum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ConsultaCodigo, &c.DocumentoPaciente, &c.DocumentoMedico, &c.IDConsultorio, &c.IDAutorizacion, &c.Fecha, &c.Motivo, &c.Comentarios, &c.Estado, &c.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ConsultaByIDConsultorio retrieves a row from 'CaresoftDB.Consulta' as a [Consultum].
//
// Generated from index 'idConsultorio'.
func ConsultaByIDConsultorio(ctx context.Context, db DB, idConsultorio uint) ([]*Consultum, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, documentoPaciente, documentoMedico, idConsultorio, idAutorizacion, fecha, motivo, comentarios, estado, costo ` +
		`FROM CaresoftDB.Consulta ` +
		`WHERE idConsultorio = ?`
	// run
	logf(sqlstr, idConsultorio)
	rows, err := db.QueryContext(ctx, sqlstr, idConsultorio)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Consultum
	for rows.Next() {
		c := Consultum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ConsultaCodigo, &c.DocumentoPaciente, &c.DocumentoMedico, &c.IDConsultorio, &c.IDAutorizacion, &c.Fecha, &c.Motivo, &c.Comentarios, &c.Estado, &c.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PerfilUsuario returns the PerfilUsuario associated with the [Consultum]'s (DocumentoPaciente).
//
// Generated from foreign key 'Consulta_ibfk_1'.
func (c *Consultum) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, c.DocumentoPaciente)
}

// PerfilUsuario returns the PerfilUsuario associated with the [Consultum]'s (DocumentoMedico).
//
// Generated from foreign key 'Consulta_ibfk_2'.
func (c *Consultum) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, c.DocumentoMedico)
}

// Consultorio returns the Consultorio associated with the [Consultum]'s (IDConsultorio).
//
// Generated from foreign key 'Consulta_ibfk_3'.
func (c *Consultum) Consultorio(ctx context.Context, db DB) (*Consultorio, error) {
	return ConsultorioByIDConsultorio(ctx, db, c.IDConsultorio)
}

// Autorizacion returns the Autorizacion associated with the [Consultum]'s (IDAutorizacion).
//
// Generated from foreign key 'Consulta_ibfk_4'.
func (c *Consultum) Autorizacion(ctx context.Context, db DB) (*Autorizacion, error) {
	return AutorizacionByIDAutorizacion(ctx, db, uint(c.IDAutorizacion.Int64))
}

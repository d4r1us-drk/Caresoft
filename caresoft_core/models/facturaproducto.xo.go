package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// FacturaProducto represents a row from 'CaresoftDB.Factura_Producto'.
type FacturaProducto struct {
	FacturaCodigo  string         `json:"facturaCodigo"`  // facturaCodigo
	IDProducto     uint           `json:"idProducto"`     // idProducto
	IDAutorizacion sql.NullInt64  `json:"idAutorizacion"` // idAutorizacion
	Resultados     sql.NullString `json:"resultados"`     // resultados
	Costo          float64        `json:"costo"`          // costo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FacturaProducto] exists in the database.
func (fp *FacturaProducto) Exists() bool {
	return fp._exists
}

// Deleted returns true when the [FacturaProducto] has been marked for deletion
// from the database.
func (fp *FacturaProducto) Deleted() bool {
	return fp._deleted
}

// Insert inserts the [FacturaProducto] to the database.
func (fp *FacturaProducto) Insert(ctx context.Context, db DB) error {
	switch {
	case fp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Factura_Producto (` +
		`facturaCodigo, idProducto, idAutorizacion, resultados, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, fp.FacturaCodigo, fp.IDProducto, fp.IDAutorizacion, fp.Resultados, fp.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, fp.FacturaCodigo, fp.IDProducto, fp.IDAutorizacion, fp.Resultados, fp.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	fp._exists = true
	return nil
}

// Update updates a [FacturaProducto] in the database.
func (fp *FacturaProducto) Update(ctx context.Context, db DB) error {
	switch {
	case !fp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case fp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Factura_Producto SET ` +
		`idAutorizacion = ?, resultados = ?, costo = ? ` +
		`WHERE facturaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, fp.IDAutorizacion, fp.Resultados, fp.Costo, fp.FacturaCodigo, fp.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, fp.IDAutorizacion, fp.Resultados, fp.Costo, fp.FacturaCodigo, fp.IDProducto); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [FacturaProducto] to the database.
func (fp *FacturaProducto) Save(ctx context.Context, db DB) error {
	if fp.Exists() {
		return fp.Update(ctx, db)
	}
	return fp.Insert(ctx, db)
}

// Upsert performs an upsert for [FacturaProducto].
func (fp *FacturaProducto) Upsert(ctx context.Context, db DB) error {
	switch {
	case fp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Factura_Producto (` +
		`facturaCodigo, idProducto, idAutorizacion, resultados, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`facturaCodigo = VALUES(facturaCodigo), idProducto = VALUES(idProducto), idAutorizacion = VALUES(idAutorizacion), resultados = VALUES(resultados), costo = VALUES(costo)`
	// run
	logf(sqlstr, fp.FacturaCodigo, fp.IDProducto, fp.IDAutorizacion, fp.Resultados, fp.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, fp.FacturaCodigo, fp.IDProducto, fp.IDAutorizacion, fp.Resultados, fp.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	fp._exists = true
	return nil
}

// Delete deletes the [FacturaProducto] from the database.
func (fp *FacturaProducto) Delete(ctx context.Context, db DB) error {
	switch {
	case !fp._exists: // doesn't exist
		return nil
	case fp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.Factura_Producto ` +
		`WHERE facturaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, fp.FacturaCodigo, fp.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, fp.FacturaCodigo, fp.IDProducto); err != nil {
		return logerror(err)
	}
	// set deleted
	fp._deleted = true
	return nil
}

// FacturaProductoByFacturaCodigoIDProducto retrieves a row from 'CaresoftDB.Factura_Producto' as a [FacturaProducto].
//
// Generated from index 'Factura_Producto_facturaCodigo_idProducto_pkey'.
func FacturaProductoByFacturaCodigoIDProducto(ctx context.Context, db DB, facturaCodigo string, idProducto uint) (*FacturaProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`facturaCodigo, idProducto, idAutorizacion, resultados, costo ` +
		`FROM CaresoftDB.Factura_Producto ` +
		`WHERE facturaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, facturaCodigo, idProducto)
	fp := FacturaProducto{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, facturaCodigo, idProducto).Scan(&fp.FacturaCodigo, &fp.IDProducto, &fp.IDAutorizacion, &fp.Resultados, &fp.Costo); err != nil {
		return nil, logerror(err)
	}
	return &fp, nil
}

// FacturaProductoByIDAutorizacion retrieves a row from 'CaresoftDB.Factura_Producto' as a [FacturaProducto].
//
// Generated from index 'idAutorizacion'.
func FacturaProductoByIDAutorizacion(ctx context.Context, db DB, idAutorizacion sql.NullInt64) (*FacturaProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`facturaCodigo, idProducto, idAutorizacion, resultados, costo ` +
		`FROM CaresoftDB.Factura_Producto ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, idAutorizacion)
	fp := FacturaProducto{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idAutorizacion).Scan(&fp.FacturaCodigo, &fp.IDProducto, &fp.IDAutorizacion, &fp.Resultados, &fp.Costo); err != nil {
		return nil, logerror(err)
	}
	return &fp, nil
}

// FacturaProductoByIDProducto retrieves a row from 'CaresoftDB.Factura_Producto' as a [FacturaProducto].
//
// Generated from index 'idProducto'.
func FacturaProductoByIDProducto(ctx context.Context, db DB, idProducto uint) ([]*FacturaProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`facturaCodigo, idProducto, idAutorizacion, resultados, costo ` +
		`FROM CaresoftDB.Factura_Producto ` +
		`WHERE idProducto = ?`
	// run
	logf(sqlstr, idProducto)
	rows, err := db.QueryContext(ctx, sqlstr, idProducto)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FacturaProducto
	for rows.Next() {
		fp := FacturaProducto{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fp.FacturaCodigo, &fp.IDProducto, &fp.IDAutorizacion, &fp.Resultados, &fp.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Factura returns the Factura associated with the [FacturaProducto]'s (FacturaCodigo).
//
// Generated from foreign key 'Factura_Producto_ibfk_1'.
func (fp *FacturaProducto) Factura(ctx context.Context, db DB) (*Factura, error) {
	return FacturaByFacturaCodigo(ctx, db, fp.FacturaCodigo)
}

// Producto returns the Producto associated with the [FacturaProducto]'s (IDProducto).
//
// Generated from foreign key 'Factura_Producto_ibfk_2'.
func (fp *FacturaProducto) Producto(ctx context.Context, db DB) (*Producto, error) {
	return ProductoByIDProducto(ctx, db, fp.IDProducto)
}

// Autorizacion returns the Autorizacion associated with the [FacturaProducto]'s (IDAutorizacion).
//
// Generated from foreign key 'Factura_Producto_ibfk_3'.
func (fp *FacturaProducto) Autorizacion(ctx context.Context, db DB) (*Autorizacion, error) {
	return AutorizacionByIDAutorizacion(ctx, db, uint(fp.IDAutorizacion.Int64))
}

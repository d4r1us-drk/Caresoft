package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Autorizacion represents a row from 'CaresoftDB.Autorizacion'.
type Autorizacion struct {
	IDAutorizacion uint      `json:"idAutorizacion"` // idAutorizacion
	IDAseguradora  uint      `json:"idAseguradora"`  // idAseguradora
	Fecha          time.Time `json:"fecha"`          // fecha
	MontoAsegurado float64   `json:"montoAsegurado"` // montoAsegurado
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Autorizacion] exists in the database.
func (a *Autorizacion) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Autorizacion] has been marked for deletion
// from the database.
func (a *Autorizacion) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Autorizacion] to the database.
func (a *Autorizacion) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Autorizacion (` +
		`idAseguradora, fecha, montoAsegurado` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, a.IDAseguradora, a.Fecha, a.MontoAsegurado)
	res, err := db.ExecContext(ctx, sqlstr, a.IDAseguradora, a.Fecha, a.MontoAsegurado)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	a.IDAutorizacion = uint(id)
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Autorizacion] in the database.
func (a *Autorizacion) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Autorizacion SET ` +
		`idAseguradora = ?, fecha = ?, montoAsegurado = ? ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, a.IDAseguradora, a.Fecha, a.MontoAsegurado, a.IDAutorizacion)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAseguradora, a.Fecha, a.MontoAsegurado, a.IDAutorizacion); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Autorizacion] to the database.
func (a *Autorizacion) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Autorizacion].
func (a *Autorizacion) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Autorizacion (` +
		`idAutorizacion, idAseguradora, fecha, montoAsegurado` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`idAseguradora = VALUES(idAseguradora), fecha = VALUES(fecha), montoAsegurado = VALUES(montoAsegurado)`
	// run
	logf(sqlstr, a.IDAutorizacion, a.IDAseguradora, a.Fecha, a.MontoAsegurado)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAutorizacion, a.IDAseguradora, a.Fecha, a.MontoAsegurado); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Autorizacion] from the database.
func (a *Autorizacion) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Autorizacion ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, a.IDAutorizacion)
	if _, err := db.ExecContext(ctx, sqlstr, a.IDAutorizacion); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AutorizacionByIDAutorizacion retrieves a row from 'CaresoftDB.Autorizacion' as a [Autorizacion].
//
// Generated from index 'Autorizacion_idAutorizacion_pkey'.
func AutorizacionByIDAutorizacion(ctx context.Context, db DB, idAutorizacion uint) (*Autorizacion, error) {
	// query
	const sqlstr = `SELECT ` +
		`idAutorizacion, idAseguradora, fecha, montoAsegurado ` +
		`FROM CaresoftDB.Autorizacion ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, idAutorizacion)
	a := Autorizacion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idAutorizacion).Scan(&a.IDAutorizacion, &a.IDAseguradora, &a.Fecha, &a.MontoAsegurado); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AutorizacionByIDAseguradora retrieves a row from 'CaresoftDB.Autorizacion' as a [Autorizacion].
//
// Generated from index 'idAseguradora'.
func AutorizacionByIDAseguradora(ctx context.Context, db DB, idAseguradora uint) ([]*Autorizacion, error) {
	// query
	const sqlstr = `SELECT ` +
		`idAutorizacion, idAseguradora, fecha, montoAsegurado ` +
		`FROM CaresoftDB.Autorizacion ` +
		`WHERE idAseguradora = ?`
	// run
	logf(sqlstr, idAseguradora)
	rows, err := db.QueryContext(ctx, sqlstr, idAseguradora)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Autorizacion
	for rows.Next() {
		a := Autorizacion{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&a.IDAutorizacion, &a.IDAseguradora, &a.Fecha, &a.MontoAsegurado); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Aseguradora returns the Aseguradora associated with the [Autorizacion]'s (IDAseguradora).
//
// Generated from foreign key 'Autorizacion_ibfk_1'.
func (a *Autorizacion) Aseguradora(ctx context.Context, db DB) (*Aseguradora, error) {
	return AseguradoraByIDAseguradora(ctx, db, a.IDAseguradora)
}

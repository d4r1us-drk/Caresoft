package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Servicio represents a row from 'CaresoftDB.Servicio'.
type Servicio struct {
	ServicioCodigo string  `json:"servicioCodigo"` // servicioCodigo
	IDTipoServicio uint    `json:"idTipoServicio"` // idTipoServicio
	Nombre         string  `json:"nombre"`         // nombre
	Descripcion    string  `json:"descripcion"`    // descripcion
	Costo          float64 `json:"costo"`          // costo
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Servicio] exists in the database.
func (s *Servicio) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Servicio] has been marked for deletion
// from the database.
func (s *Servicio) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Servicio] to the database.
func (s *Servicio) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Servicio (` +
		`servicioCodigo, idTipoServicio, nombre, descripcion, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, s.ServicioCodigo, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, s.ServicioCodigo, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Servicio] in the database.
func (s *Servicio) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Servicio SET ` +
		`idTipoServicio = ?, nombre = ?, descripcion = ?, costo = ? ` +
		`WHERE servicioCodigo = ?`
	// run
	logf(sqlstr, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo, s.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo, s.ServicioCodigo); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Servicio] to the database.
func (s *Servicio) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Servicio].
func (s *Servicio) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Servicio (` +
		`servicioCodigo, idTipoServicio, nombre, descripcion, costo` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`servicioCodigo = VALUES(servicioCodigo), idTipoServicio = VALUES(idTipoServicio), nombre = VALUES(nombre), descripcion = VALUES(descripcion), costo = VALUES(costo)`
	// run
	logf(sqlstr, s.ServicioCodigo, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo)
	if _, err := db.ExecContext(ctx, sqlstr, s.ServicioCodigo, s.IDTipoServicio, s.Nombre, s.Descripcion, s.Costo); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Servicio] from the database.
func (s *Servicio) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Servicio ` +
		`WHERE servicioCodigo = ?`
	// run
	logf(sqlstr, s.ServicioCodigo)
	if _, err := db.ExecContext(ctx, sqlstr, s.ServicioCodigo); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// ServicioByServicioCodigo retrieves a row from 'CaresoftDB.Servicio' as a [Servicio].
//
// Generated from index 'Servicio_servicioCodigo_pkey'.
func ServicioByServicioCodigo(ctx context.Context, db DB, servicioCodigo string) (*Servicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`servicioCodigo, idTipoServicio, nombre, descripcion, costo ` +
		`FROM CaresoftDB.Servicio ` +
		`WHERE servicioCodigo = ?`
	// run
	logf(sqlstr, servicioCodigo)
	s := Servicio{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, servicioCodigo).Scan(&s.ServicioCodigo, &s.IDTipoServicio, &s.Nombre, &s.Descripcion, &s.Costo); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// ServicioByIDTipoServicio retrieves a row from 'CaresoftDB.Servicio' as a [Servicio].
//
// Generated from index 'idTipoServicio'.
func ServicioByIDTipoServicio(ctx context.Context, db DB, idTipoServicio uint) ([]*Servicio, error) {
	// query
	const sqlstr = `SELECT ` +
		`servicioCodigo, idTipoServicio, nombre, descripcion, costo ` +
		`FROM CaresoftDB.Servicio ` +
		`WHERE idTipoServicio = ?`
	// run
	logf(sqlstr, idTipoServicio)
	rows, err := db.QueryContext(ctx, sqlstr, idTipoServicio)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Servicio
	for rows.Next() {
		s := Servicio{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ServicioCodigo, &s.IDTipoServicio, &s.Nombre, &s.Descripcion, &s.Costo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TipoServicio returns the TipoServicio associated with the [Servicio]'s (IDTipoServicio).
//
// Generated from foreign key 'Servicio_ibfk_1'.
func (s *Servicio) TipoServicio(ctx context.Context, db DB) (*TipoServicio, error) {
	return TipoServicioByIDTipoServicio(ctx, db, s.IDTipoServicio)
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PrescripcionProducto represents a row from 'CaresoftDB.PrescripcionProducto'.
type PrescripcionProducto struct {
	ConsultaCodigo string `json:"consultaCodigo"` // consultaCodigo
	IDProducto     uint   `json:"idProducto"`     // idProducto
	Cantidad       int    `json:"cantidad"`       // cantidad
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PrescripcionProducto] exists in the database.
func (pp *PrescripcionProducto) Exists() bool {
	return pp._exists
}

// Deleted returns true when the [PrescripcionProducto] has been marked for deletion
// from the database.
func (pp *PrescripcionProducto) Deleted() bool {
	return pp._deleted
}

// Insert inserts the [PrescripcionProducto] to the database.
func (pp *PrescripcionProducto) Insert(ctx context.Context, db DB) error {
	switch {
	case pp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.PrescripcionProducto (` +
		`consultaCodigo, idProducto, cantidad` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, pp.ConsultaCodigo, pp.IDProducto, pp.Cantidad)
	if _, err := db.ExecContext(ctx, sqlstr, pp.ConsultaCodigo, pp.IDProducto, pp.Cantidad); err != nil {
		return logerror(err)
	}
	// set exists
	pp._exists = true
	return nil
}

// Update updates a [PrescripcionProducto] in the database.
func (pp *PrescripcionProducto) Update(ctx context.Context, db DB) error {
	switch {
	case !pp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.PrescripcionProducto SET ` +
		`cantidad = ? ` +
		`WHERE consultaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, pp.Cantidad, pp.ConsultaCodigo, pp.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, pp.Cantidad, pp.ConsultaCodigo, pp.IDProducto); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PrescripcionProducto] to the database.
func (pp *PrescripcionProducto) Save(ctx context.Context, db DB) error {
	if pp.Exists() {
		return pp.Update(ctx, db)
	}
	return pp.Insert(ctx, db)
}

// Upsert performs an upsert for [PrescripcionProducto].
func (pp *PrescripcionProducto) Upsert(ctx context.Context, db DB) error {
	switch {
	case pp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.PrescripcionProducto (` +
		`consultaCodigo, idProducto, cantidad` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`consultaCodigo = VALUES(consultaCodigo), idProducto = VALUES(idProducto), cantidad = VALUES(cantidad)`
	// run
	logf(sqlstr, pp.ConsultaCodigo, pp.IDProducto, pp.Cantidad)
	if _, err := db.ExecContext(ctx, sqlstr, pp.ConsultaCodigo, pp.IDProducto, pp.Cantidad); err != nil {
		return logerror(err)
	}
	// set exists
	pp._exists = true
	return nil
}

// Delete deletes the [PrescripcionProducto] from the database.
func (pp *PrescripcionProducto) Delete(ctx context.Context, db DB) error {
	switch {
	case !pp._exists: // doesn't exist
		return nil
	case pp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.PrescripcionProducto ` +
		`WHERE consultaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, pp.ConsultaCodigo, pp.IDProducto)
	if _, err := db.ExecContext(ctx, sqlstr, pp.ConsultaCodigo, pp.IDProducto); err != nil {
		return logerror(err)
	}
	// set deleted
	pp._deleted = true
	return nil
}

// PrescripcionProductoByConsultaCodigoIDProducto retrieves a row from 'CaresoftDB.PrescripcionProducto' as a [PrescripcionProducto].
//
// Generated from index 'PrescripcionProducto_consultaCodigo_idProducto_pkey'.
func PrescripcionProductoByConsultaCodigoIDProducto(ctx context.Context, db DB, consultaCodigo string, idProducto uint) (*PrescripcionProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, idProducto, cantidad ` +
		`FROM CaresoftDB.PrescripcionProducto ` +
		`WHERE consultaCodigo = ? AND idProducto = ?`
	// run
	logf(sqlstr, consultaCodigo, idProducto)
	pp := PrescripcionProducto{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, consultaCodigo, idProducto).Scan(&pp.ConsultaCodigo, &pp.IDProducto, &pp.Cantidad); err != nil {
		return nil, logerror(err)
	}
	return &pp, nil
}

// PrescripcionProductoByIDProducto retrieves a row from 'CaresoftDB.PrescripcionProducto' as a [PrescripcionProducto].
//
// Generated from index 'idProducto'.
func PrescripcionProductoByIDProducto(ctx context.Context, db DB, idProducto uint) ([]*PrescripcionProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`consultaCodigo, idProducto, cantidad ` +
		`FROM CaresoftDB.PrescripcionProducto ` +
		`WHERE idProducto = ?`
	// run
	logf(sqlstr, idProducto)
	rows, err := db.QueryContext(ctx, sqlstr, idProducto)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PrescripcionProducto
	for rows.Next() {
		pp := PrescripcionProducto{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pp.ConsultaCodigo, &pp.IDProducto, &pp.Cantidad); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Consultum returns the Consultum associated with the [PrescripcionProducto]'s (ConsultaCodigo).
//
// Generated from foreign key 'PrescripcionProducto_ibfk_1'.
func (pp *PrescripcionProducto) Consultum(ctx context.Context, db DB) (*Consultum, error) {
	return ConsultumByConsultaCodigo(ctx, db, pp.ConsultaCodigo)
}

// Producto returns the Producto associated with the [PrescripcionProducto]'s (IDProducto).
//
// Generated from foreign key 'PrescripcionProducto_ibfk_2'.
func (pp *PrescripcionProducto) Producto(ctx context.Context, db DB) (*Producto, error) {
	return ProductoByIDProducto(ctx, db, pp.IDProducto)
}

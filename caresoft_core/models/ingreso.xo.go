package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Ingreso represents a row from 'CaresoftDB.Ingreso'.
type Ingreso struct {
	IDIngreso          uint           `json:"idIngreso"`          // idIngreso
	DocumentoPaciente  string         `json:"documentoPaciente"`  // documentoPaciente
	DocumentoEnfermero string         `json:"documentoEnfermero"` // documentoEnfermero
	DocumentoMedico    string         `json:"documentoMedico"`    // documentoMedico
	ConsultaCodigo     sql.NullString `json:"consultaCodigo"`     // consultaCodigo
	IDAutorizacion     sql.NullInt64  `json:"idAutorizacion"`     // idAutorizacion
	NumSala            uint           `json:"numSala"`            // numSala
	CostoEstancia      float64        `json:"costoEstancia"`      // costoEstancia
	FechaIngreso       time.Time      `json:"fechaIngreso"`       // fechaIngreso
	FechaAlta          sql.NullTime   `json:"fechaAlta"`          // fechaAlta
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Ingreso] exists in the database.
func (i *Ingreso) Exists() bool {
	return i._exists
}

// Deleted returns true when the [Ingreso] has been marked for deletion
// from the database.
func (i *Ingreso) Deleted() bool {
	return i._deleted
}

// Insert inserts the [Ingreso] to the database.
func (i *Ingreso) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO CaresoftDB.Ingreso (` +
		`documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta)
	res, err := db.ExecContext(ctx, sqlstr, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	i.IDIngreso = uint(id)
	// set exists
	i._exists = true
	return nil
}

// Update updates a [Ingreso] in the database.
func (i *Ingreso) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE CaresoftDB.Ingreso SET ` +
		`documentoPaciente = ?, documentoEnfermero = ?, documentoMedico = ?, consultaCodigo = ?, idAutorizacion = ?, numSala = ?, costoEstancia = ?, fechaIngreso = ?, fechaAlta = ? ` +
		`WHERE idIngreso = ?`
	// run
	logf(sqlstr, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta, i.IDIngreso)
	if _, err := db.ExecContext(ctx, sqlstr, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta, i.IDIngreso); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Ingreso] to the database.
func (i *Ingreso) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for [Ingreso].
func (i *Ingreso) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO CaresoftDB.Ingreso (` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`documentoPaciente = VALUES(documentoPaciente), documentoEnfermero = VALUES(documentoEnfermero), documentoMedico = VALUES(documentoMedico), consultaCodigo = VALUES(consultaCodigo), idAutorizacion = VALUES(idAutorizacion), numSala = VALUES(numSala), costoEstancia = VALUES(costoEstancia), fechaIngreso = VALUES(fechaIngreso), fechaAlta = VALUES(fechaAlta)`
	// run
	logf(sqlstr, i.IDIngreso, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta)
	if _, err := db.ExecContext(ctx, sqlstr, i.IDIngreso, i.DocumentoPaciente, i.DocumentoEnfermero, i.DocumentoMedico, i.ConsultaCodigo, i.IDAutorizacion, i.NumSala, i.CostoEstancia, i.FechaIngreso, i.FechaAlta); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the [Ingreso] from the database.
func (i *Ingreso) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM CaresoftDB.Ingreso ` +
		`WHERE idIngreso = ?`
	// run
	logf(sqlstr, i.IDIngreso)
	if _, err := db.ExecContext(ctx, sqlstr, i.IDIngreso); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// IngresoByIDIngreso retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'Ingreso_idIngreso_pkey'.
func IngresoByIDIngreso(ctx context.Context, db DB, idIngreso uint) (*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE idIngreso = ?`
	// run
	logf(sqlstr, idIngreso)
	i := Ingreso{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idIngreso).Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// IngresoByConsultaCodigo retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'consultaCodigo'.
func IngresoByConsultaCodigo(ctx context.Context, db DB, consultaCodigo sql.NullString) (*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE consultaCodigo = ?`
	// run
	logf(sqlstr, consultaCodigo)
	i := Ingreso{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, consultaCodigo).Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// IngresoByDocumentoEnfermero retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'documentoEnfermero'.
func IngresoByDocumentoEnfermero(ctx context.Context, db DB, documentoEnfermero string) ([]*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE documentoEnfermero = ?`
	// run
	logf(sqlstr, documentoEnfermero)
	rows, err := db.QueryContext(ctx, sqlstr, documentoEnfermero)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Ingreso
	for rows.Next() {
		i := Ingreso{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// IngresoByDocumentoMedico retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'documentoMedico'.
func IngresoByDocumentoMedico(ctx context.Context, db DB, documentoMedico string) ([]*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE documentoMedico = ?`
	// run
	logf(sqlstr, documentoMedico)
	rows, err := db.QueryContext(ctx, sqlstr, documentoMedico)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Ingreso
	for rows.Next() {
		i := Ingreso{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// IngresoByDocumentoPaciente retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'documentoPaciente'.
func IngresoByDocumentoPaciente(ctx context.Context, db DB, documentoPaciente string) ([]*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE documentoPaciente = ?`
	// run
	logf(sqlstr, documentoPaciente)
	rows, err := db.QueryContext(ctx, sqlstr, documentoPaciente)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Ingreso
	for rows.Next() {
		i := Ingreso{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// IngresoByIDAutorizacion retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'idAutorizacion'.
func IngresoByIDAutorizacion(ctx context.Context, db DB, idAutorizacion sql.NullInt64) ([]*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE idAutorizacion = ?`
	// run
	logf(sqlstr, idAutorizacion)
	rows, err := db.QueryContext(ctx, sqlstr, idAutorizacion)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Ingreso
	for rows.Next() {
		i := Ingreso{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// IngresoByNumSala retrieves a row from 'CaresoftDB.Ingreso' as a [Ingreso].
//
// Generated from index 'numSala'.
func IngresoByNumSala(ctx context.Context, db DB, numSala uint) ([]*Ingreso, error) {
	// query
	const sqlstr = `SELECT ` +
		`idIngreso, documentoPaciente, documentoEnfermero, documentoMedico, consultaCodigo, idAutorizacion, numSala, costoEstancia, fechaIngreso, fechaAlta ` +
		`FROM CaresoftDB.Ingreso ` +
		`WHERE numSala = ?`
	// run
	logf(sqlstr, numSala)
	rows, err := db.QueryContext(ctx, sqlstr, numSala)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Ingreso
	for rows.Next() {
		i := Ingreso{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.IDIngreso, &i.DocumentoPaciente, &i.DocumentoEnfermero, &i.DocumentoMedico, &i.ConsultaCodigo, &i.IDAutorizacion, &i.NumSala, &i.CostoEstancia, &i.FechaIngreso, &i.FechaAlta); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PerfilUsuario returns the PerfilUsuario associated with the [Ingreso]'s (DocumentoPaciente).
//
// Generated from foreign key 'Ingreso_ibfk_1'.
func (i *Ingreso) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, i.DocumentoPaciente)
}

// PerfilUsuario returns the PerfilUsuario associated with the [Ingreso]'s (DocumentoMedico).
//
// Generated from foreign key 'Ingreso_ibfk_2'.
func (i *Ingreso) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, i.DocumentoMedico)
}

// PerfilUsuario returns the PerfilUsuario associated with the [Ingreso]'s (DocumentoEnfermero).
//
// Generated from foreign key 'Ingreso_ibfk_3'.
func (i *Ingreso) PerfilUsuario(ctx context.Context, db DB) (*PerfilUsuario, error) {
	return PerfilUsuarioByDocumento(ctx, db, i.DocumentoEnfermero)
}

// Autorizacion returns the Autorizacion associated with the [Ingreso]'s (IDAutorizacion).
//
// Generated from foreign key 'Ingreso_ibfk_4'.
func (i *Ingreso) Autorizacion(ctx context.Context, db DB) (*Autorizacion, error) {
	return AutorizacionByIDAutorizacion(ctx, db, uint(i.IDAutorizacion.Int64))
}

// Sala returns the Sala associated with the [Ingreso]'s (NumSala).
//
// Generated from foreign key 'Ingreso_ibfk_5'.
func (i *Ingreso) Sala(ctx context.Context, db DB) (*Sala, error) {
	return SalaByNumSala(ctx, db, i.NumSala)
}

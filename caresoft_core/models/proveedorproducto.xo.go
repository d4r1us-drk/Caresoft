package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ProveedorProducto represents a row from 'CaresoftDB.Proveedor_Producto'.
type ProveedorProducto struct {
	IDProducto   uint `json:"idProducto"`   // idProducto
	RncProveedor uint `json:"rncProveedor"` // rncProveedor
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ProveedorProducto] exists in the database.
func (pp *ProveedorProducto) Exists() bool {
	return pp._exists
}

// Deleted returns true when the [ProveedorProducto] has been marked for deletion
// from the database.
func (pp *ProveedorProducto) Deleted() bool {
	return pp._deleted
}

// Insert inserts the [ProveedorProducto] to the database.
func (pp *ProveedorProducto) Insert(ctx context.Context, db DB) error {
	switch {
	case pp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO CaresoftDB.Proveedor_Producto (` +
		`idProducto, rncProveedor` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, pp.IDProducto, pp.RncProveedor)
	if _, err := db.ExecContext(ctx, sqlstr, pp.IDProducto, pp.RncProveedor); err != nil {
		return logerror(err)
	}
	// set exists
	pp._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [ProveedorProducto] from the database.
func (pp *ProveedorProducto) Delete(ctx context.Context, db DB) error {
	switch {
	case !pp._exists: // doesn't exist
		return nil
	case pp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM CaresoftDB.Proveedor_Producto ` +
		`WHERE idProducto = ? AND rncProveedor = ?`
	// run
	logf(sqlstr, pp.IDProducto, pp.RncProveedor)
	if _, err := db.ExecContext(ctx, sqlstr, pp.IDProducto, pp.RncProveedor); err != nil {
		return logerror(err)
	}
	// set deleted
	pp._deleted = true
	return nil
}

// ProveedorProductoByIDProductoRncProveedor retrieves a row from 'CaresoftDB.Proveedor_Producto' as a [ProveedorProducto].
//
// Generated from index 'Proveedor_Producto_idProducto_rncProveedor_pkey'.
func ProveedorProductoByIDProductoRncProveedor(ctx context.Context, db DB, idProducto, rncProveedor uint) (*ProveedorProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`idProducto, rncProveedor ` +
		`FROM CaresoftDB.Proveedor_Producto ` +
		`WHERE idProducto = ? AND rncProveedor = ?`
	// run
	logf(sqlstr, idProducto, rncProveedor)
	pp := ProveedorProducto{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, idProducto, rncProveedor).Scan(&pp.IDProducto, &pp.RncProveedor); err != nil {
		return nil, logerror(err)
	}
	return &pp, nil
}

// ProveedorProductoByRncProveedor retrieves a row from 'CaresoftDB.Proveedor_Producto' as a [ProveedorProducto].
//
// Generated from index 'rncProveedor'.
func ProveedorProductoByRncProveedor(ctx context.Context, db DB, rncProveedor uint) ([]*ProveedorProducto, error) {
	// query
	const sqlstr = `SELECT ` +
		`idProducto, rncProveedor ` +
		`FROM CaresoftDB.Proveedor_Producto ` +
		`WHERE rncProveedor = ?`
	// run
	logf(sqlstr, rncProveedor)
	rows, err := db.QueryContext(ctx, sqlstr, rncProveedor)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ProveedorProducto
	for rows.Next() {
		pp := ProveedorProducto{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pp.IDProducto, &pp.RncProveedor); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Proveedor returns the Proveedor associated with the [ProveedorProducto]'s (RncProveedor).
//
// Generated from foreign key 'Proveedor_Producto_ibfk_1'.
func (pp *ProveedorProducto) Proveedor(ctx context.Context, db DB) (*Proveedor, error) {
	return ProveedorByRncProveedor(ctx, db, pp.RncProveedor)
}

// Producto returns the Producto associated with the [ProveedorProducto]'s (IDProducto).
//
// Generated from foreign key 'Proveedor_Producto_ibfk_2'.
func (pp *ProveedorProducto) Producto(ctx context.Context, db DB) (*Producto, error) {
	return ProductoByIDProducto(ctx, db, pp.IDProducto)
}
